{"ast":null,"code":"// TODO: test stencil and depth\nimport { Texture } from './Texture.js';\nexport class RenderTarget {\n  constructor(gl) {\n    let {\n      width = gl.canvas.width,\n      height = gl.canvas.height,\n      target = gl.FRAMEBUFFER,\n      color = 1,\n      // number of color attachments\n      depth = true,\n      stencil = false,\n      depthTexture = false,\n      // note - stencil breaks\n      wrapS = gl.CLAMP_TO_EDGE,\n      wrapT = gl.CLAMP_TO_EDGE,\n      minFilter = gl.LINEAR,\n      magFilter = minFilter,\n      type = gl.UNSIGNED_BYTE,\n      format = gl.RGBA,\n      internalFormat = format,\n      unpackAlignment,\n      premultiplyAlpha\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.gl = gl;\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.buffer = this.gl.createFramebuffer();\n    this.target = target;\n    this.gl.bindFramebuffer(this.target, this.buffer);\n    this.textures = [];\n    const drawBuffers = [];\n\n    // create and attach required num of color textures\n    for (let i = 0; i < color; i++) {\n      this.textures.push(new Texture(gl, {\n        width,\n        height,\n        wrapS,\n        wrapT,\n        minFilter,\n        magFilter,\n        type,\n        format,\n        internalFormat,\n        unpackAlignment,\n        premultiplyAlpha,\n        flipY: false,\n        generateMipmaps: false\n      }));\n      this.textures[i].update();\n      this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0 /* level */);\n      drawBuffers.push(this.gl.COLOR_ATTACHMENT0 + i);\n    }\n\n    // For multi-render targets shader access\n    if (drawBuffers.length > 1) this.gl.renderer.drawBuffers(drawBuffers);\n\n    // alias for majority of use cases\n    this.texture = this.textures[0];\n\n    // note depth textures break stencil - so can't use together\n    if (depthTexture && (this.gl.renderer.isWebgl2 || this.gl.renderer.getExtension('WEBGL_depth_texture'))) {\n      this.depthTexture = new Texture(gl, {\n        width,\n        height,\n        minFilter: this.gl.NEAREST,\n        magFilter: this.gl.NEAREST,\n        format: this.gl.DEPTH_COMPONENT,\n        internalFormat: gl.renderer.isWebgl2 ? this.gl.DEPTH_COMPONENT16 : this.gl.DEPTH_COMPONENT,\n        type: this.gl.UNSIGNED_INT\n      });\n      this.depthTexture.update();\n      this.gl.framebufferTexture2D(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0 /* level */);\n    } else {\n      // Render buffers\n      if (depth && !stencil) {\n        this.depthBuffer = this.gl.createRenderbuffer();\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n        this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this.depthBuffer);\n      }\n      if (stencil && !depth) {\n        this.stencilBuffer = this.gl.createRenderbuffer();\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\n        this.gl.framebufferRenderbuffer(this.target, this.gl.STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.stencilBuffer);\n      }\n      if (depth && stencil) {\n        this.depthStencilBuffer = this.gl.createRenderbuffer();\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\n        this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.depthStencilBuffer);\n      }\n    }\n    this.gl.bindFramebuffer(this.target, null);\n  }\n  setSize(width, height) {\n    if (this.width === width && this.height === height) return;\n    this.width = width;\n    this.height = height;\n    this.gl.bindFramebuffer(this.target, this.buffer);\n    for (let i = 0; i < this.textures.length; i++) {\n      this.textures[i].width = width;\n      this.textures[i].height = height;\n      this.textures[i].needsUpdate = true;\n      this.textures[i].update();\n      this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0 /* level */);\n    }\n    if (this.depthTexture) {\n      this.depthTexture.width = width;\n      this.depthTexture.height = height;\n      this.depthTexture.needsUpdate = true;\n      this.depthTexture.update();\n      this.gl.framebufferTexture2D(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0 /* level */);\n    } else {\n      if (this.depthBuffer) {\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n      }\n      if (this.stencilBuffer) {\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\n      }\n      if (this.depthStencilBuffer) {\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\n      }\n    }\n    this.gl.bindFramebuffer(this.target, null);\n  }\n}","map":{"version":3,"names":["Texture","RenderTarget","constructor","gl","width","canvas","height","target","FRAMEBUFFER","color","depth","stencil","depthTexture","wrapS","CLAMP_TO_EDGE","wrapT","minFilter","LINEAR","magFilter","type","UNSIGNED_BYTE","format","RGBA","internalFormat","unpackAlignment","premultiplyAlpha","arguments","length","undefined","buffer","createFramebuffer","bindFramebuffer","textures","drawBuffers","i","push","flipY","generateMipmaps","update","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","texture","renderer","isWebgl2","getExtension","NEAREST","DEPTH_COMPONENT","DEPTH_COMPONENT16","UNSIGNED_INT","DEPTH_ATTACHMENT","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","stencilBuffer","STENCIL_INDEX8","STENCIL_ATTACHMENT","depthStencilBuffer","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","setSize","needsUpdate"],"sources":["/Users/krishnapandey/Desktop/Codevo/node_modules/ogl/src/core/RenderTarget.js"],"sourcesContent":["// TODO: test stencil and depth\nimport { Texture } from './Texture.js';\n\nexport class RenderTarget {\n    constructor(\n        gl,\n        {\n            width = gl.canvas.width,\n            height = gl.canvas.height,\n            target = gl.FRAMEBUFFER,\n            color = 1, // number of color attachments\n            depth = true,\n            stencil = false,\n            depthTexture = false, // note - stencil breaks\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            minFilter = gl.LINEAR,\n            magFilter = minFilter,\n            type = gl.UNSIGNED_BYTE,\n            format = gl.RGBA,\n            internalFormat = format,\n            unpackAlignment,\n            premultiplyAlpha,\n        } = {}\n    ) {\n        this.gl = gl;\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.buffer = this.gl.createFramebuffer();\n        this.target = target;\n        this.gl.bindFramebuffer(this.target, this.buffer);\n\n        this.textures = [];\n        const drawBuffers = [];\n\n        // create and attach required num of color textures\n        for (let i = 0; i < color; i++) {\n            this.textures.push(\n                new Texture(gl, {\n                    width,\n                    height,\n                    wrapS,\n                    wrapT,\n                    minFilter,\n                    magFilter,\n                    type,\n                    format,\n                    internalFormat,\n                    unpackAlignment,\n                    premultiplyAlpha,\n                    flipY: false,\n                    generateMipmaps: false,\n                })\n            );\n            this.textures[i].update();\n            this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0 /* level */);\n            drawBuffers.push(this.gl.COLOR_ATTACHMENT0 + i);\n        }\n\n        // For multi-render targets shader access\n        if (drawBuffers.length > 1) this.gl.renderer.drawBuffers(drawBuffers);\n\n        // alias for majority of use cases\n        this.texture = this.textures[0];\n\n        // note depth textures break stencil - so can't use together\n        if (depthTexture && (this.gl.renderer.isWebgl2 || this.gl.renderer.getExtension('WEBGL_depth_texture'))) {\n            this.depthTexture = new Texture(gl, {\n                width,\n                height,\n                minFilter: this.gl.NEAREST,\n                magFilter: this.gl.NEAREST,\n                format: this.gl.DEPTH_COMPONENT,\n                internalFormat: gl.renderer.isWebgl2 ? this.gl.DEPTH_COMPONENT16 : this.gl.DEPTH_COMPONENT,\n                type: this.gl.UNSIGNED_INT,\n            });\n            this.depthTexture.update();\n            this.gl.framebufferTexture2D(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0 /* level */);\n        } else {\n            // Render buffers\n            if (depth && !stencil) {\n                this.depthBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this.depthBuffer);\n            }\n\n            if (stencil && !depth) {\n                this.stencilBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.stencilBuffer);\n            }\n\n            if (depth && stencil) {\n                this.depthStencilBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.depthStencilBuffer);\n            }\n        }\n\n        this.gl.bindFramebuffer(this.target, null);\n    }\n\n    setSize(width, height) {\n        if (this.width === width && this.height === height) return;\n\n        this.width = width;\n        this.height = height;\n        this.gl.bindFramebuffer(this.target, this.buffer);\n\n        for (let i = 0; i < this.textures.length; i++) {\n            this.textures[i].width = width;\n            this.textures[i].height = height;\n            this.textures[i].needsUpdate = true;\n            this.textures[i].update();\n            this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0 /* level */);\n        }\n\n        if (this.depthTexture) {\n            this.depthTexture.width = width;\n            this.depthTexture.height = height;\n            this.depthTexture.needsUpdate = true;\n            this.depthTexture.update();\n            this.gl.framebufferTexture2D(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0 /* level */);\n        } else {\n            if (this.depthBuffer) {\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n            }\n\n            if (this.stencilBuffer) {\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\n            }\n\n            if (this.depthStencilBuffer) {\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\n            }\n        }\n\n        this.gl.bindFramebuffer(this.target, null);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}