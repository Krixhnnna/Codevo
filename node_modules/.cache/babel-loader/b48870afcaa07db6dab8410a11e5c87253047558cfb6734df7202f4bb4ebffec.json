{"ast":null,"code":"import { Geometry } from '../core/Geometry.js';\nimport { Transform } from '../core/Transform.js';\nimport { Texture } from '../core/Texture.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { GLTFAnimation } from './GLTFAnimation.js';\nimport { GLTFSkin } from './GLTFSkin.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { NormalProgram } from './NormalProgram.js';\n\n// Supports\n// [x] Geometry\n// [ ] Sparse support\n// [x] Nodes and Hierarchy\n// [x] Instancing\n// [ ] Morph Targets\n// [x] Skins\n// [ ] Materials\n// [x] Textures\n// [x] Animation\n// [ ] Cameras\n// [ ] Extensions\n// [x] GLB support\n// [x] Basis/ktx2 support\n\n// TODO: Sparse accessor packing? For morph targets basically\n// TODO: init accessor missing bufferView with 0s\n// TODO: morph target animations\n// TODO: what to do if multiple instances are in different groups? Only uses local matrices\n// TODO: what if instancing isn't wanted? Eg collision maps\n// TODO: ie11 fallback for TextDecoder?\n\nconst TYPE_ARRAY = {\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array,\n  'image/jpeg': Uint8Array,\n  'image/png': Uint8Array\n};\nconst TYPE_SIZE = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nconst ATTRIBUTES = {\n  POSITION: 'position',\n  NORMAL: 'normal',\n  TANGENT: 'tangent',\n  TEXCOORD_0: 'uv',\n  TEXCOORD_1: 'uv2',\n  COLOR_0: 'color',\n  WEIGHTS_0: 'skinWeight',\n  JOINTS_0: 'skinIndex'\n};\nconst TRANSFORMS = {\n  translation: 'position',\n  rotation: 'quaternion',\n  scale: 'scale'\n};\nexport class GLTFLoader {\n  static setBasisManager(manager) {\n    this.basisManager = manager;\n  }\n  static async load(gl, src) {\n    const dir = src.split('/').slice(0, -1).join('/') + '/';\n\n    // load main description json\n    const desc = await this.parseDesc(src);\n    return await this.parse(gl, desc, dir);\n  }\n  static async parse(gl, desc, dir) {\n    if (desc.asset === undefined || desc.asset.version[0] < 2) console.warn('Only GLTF >=2.0 supported. Attempting to parse.');\n    if (desc.extensionsRequired?.includes('KHR_texture_basisu') && !this.basisManager) console.warn('KHR_texture_basisu extension required but no manager supplied. Use .setBasisManager()');\n\n    // Load buffers async\n    const buffers = await this.loadBuffers(desc, dir);\n\n    // Unbind current VAO so that new buffers don't get added to active mesh\n    gl.renderer.bindVertexArray(null);\n\n    // Create gl buffers from bufferViews\n    const bufferViews = this.parseBufferViews(gl, desc, buffers);\n\n    // Create images from either bufferViews or separate image files\n    const images = await this.parseImages(gl, desc, dir, bufferViews);\n    const textures = this.parseTextures(gl, desc, images);\n\n    // Just pass through material data for now\n    const materials = this.parseMaterials(gl, desc, textures);\n\n    // Fetch the inverse bind matrices for skeleton joints\n    const skins = this.parseSkins(gl, desc, bufferViews);\n\n    // Create geometries for each mesh primitive\n    const meshes = this.parseMeshes(gl, desc, bufferViews, materials, skins);\n\n    // Create transforms, meshes and hierarchy\n    const nodes = this.parseNodes(gl, desc, meshes, skins);\n\n    // Place nodes in skeletons\n    this.populateSkins(skins, nodes);\n\n    // Create animation handlers\n    const animations = this.parseAnimations(gl, desc, nodes, bufferViews);\n\n    // Get top level nodes for each scene\n    const scenes = this.parseScenes(desc, nodes);\n    const scene = scenes[desc.scene];\n\n    // Remove null nodes (instanced transforms)\n    for (let i = nodes.length; i >= 0; i--) if (!nodes[i]) nodes.splice(i, 1);\n    return {\n      json: desc,\n      buffers,\n      bufferViews,\n      images,\n      textures,\n      materials,\n      meshes,\n      nodes,\n      animations,\n      scenes,\n      scene\n    };\n  }\n  static async parseDesc(src) {\n    if (!src.match(/\\.glb/)) {\n      return await fetch(src).then(res => res.json());\n    } else {\n      return await fetch(src).then(res => res.arrayBuffer()).then(glb => this.unpackGLB(glb));\n    }\n  }\n\n  // From https://github.com/donmccurdy/glTF-Transform/blob/e4108cc/packages/core/src/io/io.ts#L32\n  static unpackGLB(glb) {\n    // Decode and verify GLB header.\n    const header = new Uint32Array(glb, 0, 3);\n    if (header[0] !== 0x46546c67) {\n      throw new Error('Invalid glTF asset.');\n    } else if (header[1] !== 2) {\n      throw new Error(`Unsupported glTF binary version, \"${header[1]}\".`);\n    }\n    // Decode and verify chunk headers.\n    const jsonChunkHeader = new Uint32Array(glb, 12, 2);\n    const jsonByteOffset = 20;\n    const jsonByteLength = jsonChunkHeader[0];\n    if (jsonChunkHeader[1] !== 0x4e4f534a) {\n      throw new Error('Unexpected GLB layout.');\n    }\n\n    // Decode JSON.\n    const jsonText = new TextDecoder().decode(glb.slice(jsonByteOffset, jsonByteOffset + jsonByteLength));\n    const json = JSON.parse(jsonText);\n    // JSON only\n    if (jsonByteOffset + jsonByteLength === glb.byteLength) return json;\n    const binaryChunkHeader = new Uint32Array(glb, jsonByteOffset + jsonByteLength, 2);\n    if (binaryChunkHeader[1] !== 0x004e4942) {\n      throw new Error('Unexpected GLB layout.');\n    }\n    // Decode content.\n    const binaryByteOffset = jsonByteOffset + jsonByteLength + 8;\n    const binaryByteLength = binaryChunkHeader[0];\n    const binary = glb.slice(binaryByteOffset, binaryByteOffset + binaryByteLength);\n    // Attach binary to buffer\n    json.buffers[0].binary = binary;\n    return json;\n  }\n\n  // Threejs GLTF Loader https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/GLTFLoader.js#L1085\n  static resolveURI(uri, dir) {\n    // Invalid URI\n    if (typeof uri !== 'string' || uri === '') return '';\n\n    // Host Relative URI\n    if (/^https?:\\/\\//i.test(dir) && /^\\//.test(uri)) {\n      dir = dir.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n    }\n\n    // Absolute URI http://, https://, //\n    if (/^(https?:)?\\/\\//i.test(uri)) return uri;\n\n    // Data URI\n    if (/^data:.*,.*$/i.test(uri)) return uri;\n\n    // Blob URI\n    if (/^blob:.*$/i.test(uri)) return uri;\n\n    // Relative URI\n    return dir + uri;\n  }\n  static async loadBuffers(desc, dir) {\n    if (!desc.buffers) return null;\n    return await Promise.all(desc.buffers.map(buffer => {\n      // For GLB, binary buffer ready to go\n      if (buffer.binary) return buffer.binary;\n      const uri = this.resolveURI(buffer.uri, dir);\n      return fetch(uri).then(res => res.arrayBuffer());\n    }));\n  }\n  static parseBufferViews(gl, desc, buffers) {\n    if (!desc.bufferViews) return null;\n    // Clone to leave description pure\n    const bufferViews = desc.bufferViews.map(o => Object.assign({}, o));\n    desc.meshes && desc.meshes.forEach(({\n      primitives\n    }) => {\n      primitives.forEach(({\n        attributes,\n        indices\n      }) => {\n        // Flag bufferView as an attribute, so it knows to create a gl buffer\n        for (let attr in attributes) bufferViews[desc.accessors[attributes[attr]].bufferView].isAttribute = true;\n        if (indices === undefined) return;\n        bufferViews[desc.accessors[indices].bufferView].isAttribute = true;\n\n        // Make sure indices bufferView have a target property for gl buffer binding\n        bufferViews[desc.accessors[indices].bufferView].target = gl.ELEMENT_ARRAY_BUFFER;\n      });\n    });\n\n    // Get componentType of each bufferView from the accessors\n    desc.accessors.forEach(({\n      bufferView: i,\n      componentType\n    }) => {\n      bufferViews[i].componentType = componentType;\n    });\n\n    // Get mimetype of bufferView from images\n    desc.images && desc.images.forEach(({\n      uri,\n      bufferView: i,\n      mimeType\n    }) => {\n      if (i === undefined) return;\n      bufferViews[i].mimeType = mimeType;\n    });\n\n    // Push each bufferView to the GPU as a separate buffer\n    bufferViews.forEach(({\n      buffer: bufferIndex,\n      // required\n      byteOffset = 0,\n      // optional\n      byteLength,\n      // required\n      byteStride,\n      // optional\n      target = gl.ARRAY_BUFFER,\n      // optional, added above for elements\n      name,\n      // optional\n      extensions,\n      // optional\n      extras,\n      // optional\n\n      componentType,\n      // optional, added from accessor above\n      mimeType,\n      // optional, added from images above\n      isAttribute\n    }, i) => {\n      // For basis, just slice buffer\n      if (mimeType === 'image/ktx2') {\n        bufferViews[i].data = buffers[bufferIndex].slice(byteOffset, byteOffset + byteLength);\n        return;\n      }\n      const TypeArray = TYPE_ARRAY[componentType || mimeType];\n      const elementBytes = TypeArray.BYTES_PER_ELEMENT;\n      const data = new TypeArray(buffers[bufferIndex], byteOffset, byteLength / elementBytes);\n      bufferViews[i].data = data;\n      bufferViews[i].originalBuffer = buffers[bufferIndex];\n      if (!isAttribute) return;\n      // Create gl buffers for the bufferView, pushing it to the GPU\n      const buffer = gl.createBuffer();\n      gl.bindBuffer(target, buffer);\n      gl.renderer.state.boundBuffer = buffer;\n      gl.bufferData(target, data, gl.STATIC_DRAW);\n      bufferViews[i].buffer = buffer;\n    });\n    return bufferViews;\n  }\n  static async parseImages(gl, desc, dir, bufferViews) {\n    if (!desc.images) return null;\n    return await Promise.all(desc.images.map(async ({\n      uri,\n      bufferView: bufferViewIndex,\n      mimeType,\n      name\n    }) => {\n      if (mimeType === 'image/ktx2') {\n        const {\n          data\n        } = bufferViews[bufferViewIndex];\n        const image = await this.basisManager.parseTexture(data);\n        return image;\n      }\n\n      // jpg / png\n      const image = new Image();\n      image.name = name;\n      if (uri) {\n        image.src = this.resolveURI(uri, dir);\n      } else if (bufferViewIndex !== undefined) {\n        const {\n          data\n        } = bufferViews[bufferViewIndex];\n        const blob = new Blob([data], {\n          type: mimeType\n        });\n        image.src = URL.createObjectURL(blob);\n      }\n      image.ready = new Promise(res => {\n        image.onload = () => res();\n      });\n      return image;\n    }));\n  }\n  static parseTextures(gl, desc, images) {\n    if (!desc.textures) return null;\n    return desc.textures.map(({\n      sampler: samplerIndex,\n      source: sourceIndex,\n      name,\n      extensions,\n      extras\n    }) => {\n      if (sourceIndex === undefined && !!extensions) {\n        // Basis extension source index\n        if (extensions.KHR_texture_basisu) sourceIndex = extensions.KHR_texture_basisu.source;\n      }\n      const options = {\n        flipY: false,\n        wrapS: gl.REPEAT,\n        // Repeat by default, opposed to OGL's clamp by default\n        wrapT: gl.REPEAT\n      };\n      const sampler = samplerIndex !== undefined ? desc.samplers[samplerIndex] : null;\n      if (sampler) {\n        ['magFilter', 'minFilter', 'wrapS', 'wrapT'].forEach(prop => {\n          if (sampler[prop]) options[prop] = sampler[prop];\n        });\n      }\n      const image = images[sourceIndex];\n\n      // For compressed textures\n      if (image.isBasis) {\n        options.image = image;\n        options.internalFormat = image.internalFormat;\n        if (image.isCompressedTexture) {\n          options.generateMipmaps = false;\n          if (image.length > 1) this.minFilter = gl.NEAREST_MIPMAP_LINEAR;\n        }\n        const texture = new Texture(gl, options);\n        texture.name = name;\n        return texture;\n      }\n      const texture = new Texture(gl, options);\n      texture.name = name;\n      image.ready.then(() => {\n        texture.image = image;\n      });\n      return texture;\n    });\n  }\n  static parseMaterials(gl, desc, textures) {\n    if (!desc.materials) return null;\n    return desc.materials.map(({\n      name,\n      extensions,\n      extras,\n      pbrMetallicRoughness = {},\n      normalTexture,\n      occlusionTexture,\n      emissiveTexture,\n      emissiveFactor = [0, 0, 0],\n      alphaMode = 'OPAQUE',\n      alphaCutoff = 0.5,\n      doubleSided = false\n    }) => {\n      const {\n        baseColorFactor = [1, 1, 1, 1],\n        baseColorTexture,\n        metallicFactor = 1,\n        roughnessFactor = 1,\n        metallicRoughnessTexture\n        //   extensions,\n        //   extras,\n      } = pbrMetallicRoughness;\n      if (baseColorTexture) {\n        baseColorTexture.texture = textures[baseColorTexture.index];\n        // texCoord\n      }\n      if (normalTexture) {\n        normalTexture.texture = textures[normalTexture.index];\n        // scale: 1\n        // texCoord\n      }\n      if (metallicRoughnessTexture) {\n        metallicRoughnessTexture.texture = textures[metallicRoughnessTexture.index];\n        // texCoord\n      }\n      if (occlusionTexture) {\n        occlusionTexture.texture = textures[occlusionTexture.index];\n        // strength 1\n        // texCoord\n      }\n      if (emissiveTexture) {\n        emissiveTexture.texture = textures[emissiveTexture.index];\n        // texCoord\n      }\n      return {\n        name,\n        baseColorFactor,\n        baseColorTexture,\n        metallicFactor,\n        roughnessFactor,\n        metallicRoughnessTexture,\n        normalTexture,\n        occlusionTexture,\n        emissiveTexture,\n        emissiveFactor,\n        alphaMode,\n        alphaCutoff,\n        doubleSided\n      };\n    });\n  }\n  static parseSkins(gl, desc, bufferViews) {\n    if (!desc.skins) return null;\n    return desc.skins.map(({\n      inverseBindMatrices,\n      // optional\n      skeleton,\n      // optional\n      joints // required\n      // name,\n      // extensions,\n      // extras,\n    }) => {\n      return {\n        inverseBindMatrices: this.parseAccessor(inverseBindMatrices, desc, bufferViews),\n        skeleton,\n        joints\n      };\n    });\n  }\n  static parseMeshes(gl, desc, bufferViews, materials, skins) {\n    if (!desc.meshes) return null;\n    return desc.meshes.map(({\n      primitives,\n      // required\n      weights,\n      // optional\n      name,\n      // optional\n      extensions,\n      // optional\n      extras // optional\n    }, meshIndex) => {\n      // TODO: weights stuff ?\n      // Parse through nodes to see how many instances there are\n      // and if there is a skin attached\n      let numInstances = 0;\n      let skinIndex = false;\n      desc.nodes && desc.nodes.forEach(({\n        mesh,\n        skin\n      }) => {\n        if (mesh === meshIndex) {\n          numInstances++;\n          if (skin !== undefined) skinIndex = skin;\n        }\n      });\n      primitives = this.parsePrimitives(gl, primitives, desc, bufferViews, materials, numInstances).map(({\n        geometry,\n        program,\n        mode\n      }) => {\n        // Create either skinned mesh or regular mesh\n        const mesh = typeof skinIndex === 'number' ? new GLTFSkin(gl, {\n          skeleton: skins[skinIndex],\n          geometry,\n          program,\n          mode\n        }) : new Mesh(gl, {\n          geometry,\n          program,\n          mode\n        });\n        mesh.name = name;\n        if (mesh.geometry.isInstanced) {\n          // Tag mesh so that nodes can add their transforms to the instance attribute\n          mesh.numInstances = numInstances;\n          // Avoid incorrect culling for instances\n          mesh.frustumCulled = false;\n        }\n        return mesh;\n      });\n      return {\n        primitives,\n        weights,\n        name\n      };\n    });\n  }\n  static parsePrimitives(gl, primitives, desc, bufferViews, materials, numInstances) {\n    return primitives.map(({\n      attributes,\n      // required\n      indices,\n      // optional\n      material: materialIndex,\n      // optional\n      mode = 4,\n      // optional\n      targets,\n      // optional\n      extensions,\n      // optional\n      extras // optional\n    }) => {\n      const geometry = new Geometry(gl);\n\n      // Add each attribute found in primitive\n      for (let attr in attributes) {\n        geometry.addAttribute(ATTRIBUTES[attr], this.parseAccessor(attributes[attr], desc, bufferViews));\n      }\n\n      // Add index attribute if found\n      if (indices !== undefined) {\n        geometry.addAttribute('index', this.parseAccessor(indices, desc, bufferViews));\n      }\n\n      // Add instanced transform attribute if multiple instances\n      if (numInstances > 1) {\n        geometry.addAttribute('instanceMatrix', {\n          instanced: 1,\n          size: 16,\n          data: new Float32Array(numInstances * 16)\n        });\n      }\n\n      // TODO: materials\n      const program = new NormalProgram(gl);\n      if (materialIndex !== undefined) {\n        program.gltfMaterial = materials[materialIndex];\n      }\n      return {\n        geometry,\n        program,\n        mode\n      };\n    });\n  }\n  static parseAccessor(index, desc, bufferViews) {\n    // TODO: init missing bufferView with 0s\n    // TODO: support sparse\n\n    const {\n      bufferView: bufferViewIndex,\n      // optional\n      byteOffset = 0,\n      // optional\n      componentType,\n      // required\n      normalized = false,\n      // optional\n      count,\n      // required\n      type,\n      // required\n      min,\n      // optional\n      max,\n      // optional\n      sparse // optional\n      // name, // optional\n      // extensions, // optional\n      // extras, // optional\n    } = desc.accessors[index];\n    const {\n      data,\n      // attached in parseBufferViews\n      originalBuffer,\n      // attached in parseBufferViews\n      buffer,\n      // replaced to be the actual GL buffer\n      byteOffset: bufferByteOffset = 0,\n      // byteLength, // applied in parseBufferViews\n      byteStride = 0,\n      target\n      // name,\n      // extensions,\n      // extras,\n    } = bufferViews[bufferViewIndex];\n    const size = TYPE_SIZE[type];\n\n    // Parse data from joined buffers\n    const TypeArray = TYPE_ARRAY[componentType];\n    const elementBytes = data.BYTES_PER_ELEMENT;\n    const componentOffset = byteOffset / elementBytes;\n    const componentStride = byteStride / elementBytes;\n    const isInterleaved = !!byteStride && componentStride !== size;\n\n    // TODO: interleaved\n    const newData = isInterleaved ? data : new TypeArray(originalBuffer, byteOffset + bufferByteOffset, count * size);\n\n    // Return attribute data\n    return {\n      data: newData,\n      size,\n      type: componentType,\n      normalized,\n      buffer,\n      stride: byteStride,\n      offset: byteOffset,\n      count,\n      min,\n      max\n    };\n  }\n  static parseNodes(gl, desc, meshes, skins) {\n    if (!desc.nodes) return null;\n    const nodes = desc.nodes.map(({\n      camera,\n      // optional\n      children,\n      // optional\n      skin: skinIndex,\n      // optional\n      matrix,\n      // optional\n      mesh: meshIndex,\n      // optional\n      rotation,\n      // optional\n      scale,\n      // optional\n      translation,\n      // optional\n      weights,\n      // optional\n      name,\n      // optional\n      extensions,\n      // optional\n      extras // optional\n    }) => {\n      const node = new Transform();\n      if (name) node.name = name;\n\n      // Apply transformations\n      if (matrix) {\n        node.matrix.copy(matrix);\n        node.decompose();\n      } else {\n        if (rotation) node.quaternion.copy(rotation);\n        if (scale) node.scale.copy(scale);\n        if (translation) node.position.copy(translation);\n        node.updateMatrix();\n      }\n\n      // Flags for avoiding duplicate transforms and removing unused instance nodes\n      let isInstanced = false;\n      let isFirstInstance = true;\n\n      // add mesh if included\n      if (meshIndex !== undefined) {\n        meshes[meshIndex].primitives.forEach(mesh => {\n          if (mesh.geometry.isInstanced) {\n            isInstanced = true;\n            if (!mesh.instanceCount) {\n              mesh.instanceCount = 0;\n            } else {\n              isFirstInstance = false;\n            }\n            node.matrix.toArray(mesh.geometry.attributes.instanceMatrix.data, mesh.instanceCount * 16);\n            mesh.instanceCount++;\n            if (mesh.instanceCount === mesh.numInstances) {\n              // Remove properties once all instances added\n              delete mesh.numInstances;\n              delete mesh.instanceCount;\n              // Flag attribute as dirty\n              mesh.geometry.attributes.instanceMatrix.needsUpdate = true;\n            }\n          }\n\n          // For instances, only the first node will actually have the mesh\n          if (isInstanced) {\n            if (isFirstInstance) mesh.setParent(node);\n          } else {\n            mesh.setParent(node);\n          }\n        });\n      }\n\n      // Reset node if instanced to not duplicate transforms\n      if (isInstanced) {\n        // Remove unused nodes just providing an instance transform\n        if (!isFirstInstance) return null;\n        // Avoid duplicate transform for node containing the instanced mesh\n        node.matrix.identity();\n        node.decompose();\n      }\n      return node;\n    });\n    desc.nodes.forEach(({\n      children = []\n    }, i) => {\n      // Set hierarchy now all nodes created\n      children.forEach(childIndex => {\n        if (!nodes[childIndex]) return;\n        nodes[childIndex].setParent(nodes[i]);\n      });\n    });\n    return nodes;\n  }\n  static populateSkins(skins, nodes) {\n    if (!skins) return;\n    skins.forEach(skin => {\n      skin.joints = skin.joints.map((i, index) => {\n        const joint = nodes[i];\n        joint.bindInverse = new Mat4(...skin.inverseBindMatrices.data.slice(index * 16, (index + 1) * 16));\n        return joint;\n      });\n      if (skin.skeleton) skin.skeleton = nodes[skin.skeleton];\n    });\n  }\n  static parseAnimations(gl, desc, nodes, bufferViews) {\n    if (!desc.animations) return null;\n    return desc.animations.map(({\n      channels,\n      // required\n      samplers,\n      // required\n      name // optional\n      // extensions, // optional\n      // extras,  // optional\n    }) => {\n      const data = channels.map(({\n        sampler: samplerIndex,\n        // required\n        target // required\n        // extensions, // optional\n        // extras, // optional\n      }) => {\n        const {\n          input: inputIndex,\n          // required\n          interpolation = 'LINEAR',\n          output: outputIndex // required\n          // extensions, // optional\n          // extras, // optional\n        } = samplers[samplerIndex];\n        const {\n          node: nodeIndex,\n          // optional - TODO: when is it not included?\n          path // required\n          // extensions, // optional\n          // extras, // optional\n        } = target;\n        const node = nodes[nodeIndex];\n        const transform = TRANSFORMS[path];\n        const times = this.parseAccessor(inputIndex, desc, bufferViews).data;\n        const values = this.parseAccessor(outputIndex, desc, bufferViews).data;\n        return {\n          node,\n          transform,\n          interpolation,\n          times,\n          values\n        };\n      });\n      return {\n        name,\n        animation: new GLTFAnimation(data)\n      };\n    });\n  }\n  static parseScenes(desc, nodes) {\n    if (!desc.scenes) return null;\n    return desc.scenes.map(({\n      nodes: nodesIndices = [],\n      name,\n      // optional\n      extensions,\n      extras\n    }) => {\n      return nodesIndices.reduce((map, i) => {\n        // Don't add null nodes (instanced transforms)\n        if (nodes[i]) map.push(nodes[i]);\n        return map;\n      }, []);\n    });\n  }\n}","map":{"version":3,"names":["Geometry","Transform","Texture","Mesh","GLTFAnimation","GLTFSkin","Mat4","NormalProgram","TYPE_ARRAY","Uint8Array","Int16Array","Uint16Array","Uint32Array","Float32Array","TYPE_SIZE","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","ATTRIBUTES","POSITION","NORMAL","TANGENT","TEXCOORD_0","TEXCOORD_1","COLOR_0","WEIGHTS_0","JOINTS_0","TRANSFORMS","translation","rotation","scale","GLTFLoader","setBasisManager","manager","basisManager","load","gl","src","dir","split","slice","join","desc","parseDesc","parse","asset","undefined","version","console","warn","extensionsRequired","includes","buffers","loadBuffers","renderer","bindVertexArray","bufferViews","parseBufferViews","images","parseImages","textures","parseTextures","materials","parseMaterials","skins","parseSkins","meshes","parseMeshes","nodes","parseNodes","populateSkins","animations","parseAnimations","scenes","parseScenes","scene","i","length","splice","json","match","fetch","then","res","arrayBuffer","glb","unpackGLB","header","Error","jsonChunkHeader","jsonByteOffset","jsonByteLength","jsonText","TextDecoder","decode","JSON","byteLength","binaryChunkHeader","binaryByteOffset","binaryByteLength","binary","resolveURI","uri","test","replace","Promise","all","map","buffer","o","Object","assign","forEach","primitives","attributes","indices","attr","accessors","bufferView","isAttribute","target","ELEMENT_ARRAY_BUFFER","componentType","mimeType","bufferIndex","byteOffset","byteStride","ARRAY_BUFFER","name","extensions","extras","data","TypeArray","elementBytes","BYTES_PER_ELEMENT","originalBuffer","createBuffer","bindBuffer","state","boundBuffer","bufferData","STATIC_DRAW","bufferViewIndex","image","parseTexture","Image","blob","Blob","type","URL","createObjectURL","ready","onload","sampler","samplerIndex","source","sourceIndex","KHR_texture_basisu","options","flipY","wrapS","REPEAT","wrapT","samplers","prop","isBasis","internalFormat","isCompressedTexture","generateMipmaps","minFilter","NEAREST_MIPMAP_LINEAR","texture","pbrMetallicRoughness","normalTexture","occlusionTexture","emissiveTexture","emissiveFactor","alphaMode","alphaCutoff","doubleSided","baseColorFactor","baseColorTexture","metallicFactor","roughnessFactor","metallicRoughnessTexture","index","inverseBindMatrices","skeleton","joints","parseAccessor","weights","meshIndex","numInstances","skinIndex","mesh","skin","parsePrimitives","geometry","program","mode","isInstanced","frustumCulled","material","materialIndex","targets","addAttribute","instanced","size","gltfMaterial","normalized","count","min","max","sparse","bufferByteOffset","componentOffset","componentStride","isInterleaved","newData","stride","offset","camera","children","matrix","node","copy","decompose","quaternion","position","updateMatrix","isFirstInstance","instanceCount","toArray","instanceMatrix","needsUpdate","setParent","identity","childIndex","joint","bindInverse","channels","input","inputIndex","interpolation","output","outputIndex","nodeIndex","path","transform","times","values","animation","nodesIndices","reduce","push"],"sources":["/Users/krishnapandey/Desktop/Codevo/node_modules/ogl/src/extras/GLTFLoader.js"],"sourcesContent":["import { Geometry } from '../core/Geometry.js';\nimport { Transform } from '../core/Transform.js';\nimport { Texture } from '../core/Texture.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { GLTFAnimation } from './GLTFAnimation.js';\nimport { GLTFSkin } from './GLTFSkin.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { NormalProgram } from './NormalProgram.js';\n\n// Supports\n// [x] Geometry\n// [ ] Sparse support\n// [x] Nodes and Hierarchy\n// [x] Instancing\n// [ ] Morph Targets\n// [x] Skins\n// [ ] Materials\n// [x] Textures\n// [x] Animation\n// [ ] Cameras\n// [ ] Extensions\n// [x] GLB support\n// [x] Basis/ktx2 support\n\n// TODO: Sparse accessor packing? For morph targets basically\n// TODO: init accessor missing bufferView with 0s\n// TODO: morph target animations\n// TODO: what to do if multiple instances are in different groups? Only uses local matrices\n// TODO: what if instancing isn't wanted? Eg collision maps\n// TODO: ie11 fallback for TextDecoder?\n\nconst TYPE_ARRAY = {\n    5121: Uint8Array,\n    5122: Int16Array,\n    5123: Uint16Array,\n    5125: Uint32Array,\n    5126: Float32Array,\n    'image/jpeg': Uint8Array,\n    'image/png': Uint8Array,\n};\n\nconst TYPE_SIZE = {\n    SCALAR: 1,\n    VEC2: 2,\n    VEC3: 3,\n    VEC4: 4,\n    MAT2: 4,\n    MAT3: 9,\n    MAT4: 16,\n};\n\nconst ATTRIBUTES = {\n    POSITION: 'position',\n    NORMAL: 'normal',\n    TANGENT: 'tangent',\n    TEXCOORD_0: 'uv',\n    TEXCOORD_1: 'uv2',\n    COLOR_0: 'color',\n    WEIGHTS_0: 'skinWeight',\n    JOINTS_0: 'skinIndex',\n};\n\nconst TRANSFORMS = {\n    translation: 'position',\n    rotation: 'quaternion',\n    scale: 'scale',\n};\n\nexport class GLTFLoader {\n    static setBasisManager(manager) {\n        this.basisManager = manager;\n    }\n\n    static async load(gl, src) {\n        const dir = src.split('/').slice(0, -1).join('/') + '/';\n\n        // load main description json\n        const desc = await this.parseDesc(src);\n\n        return await this.parse(gl, desc, dir);\n    }\n\n    static async parse(gl, desc, dir) {\n        if (desc.asset === undefined || desc.asset.version[0] < 2) console.warn('Only GLTF >=2.0 supported. Attempting to parse.');\n\n        if (desc.extensionsRequired?.includes('KHR_texture_basisu') && !this.basisManager)\n            console.warn('KHR_texture_basisu extension required but no manager supplied. Use .setBasisManager()');\n\n        // Load buffers async\n        const buffers = await this.loadBuffers(desc, dir);\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        gl.renderer.bindVertexArray(null);\n\n        // Create gl buffers from bufferViews\n        const bufferViews = this.parseBufferViews(gl, desc, buffers);\n\n        // Create images from either bufferViews or separate image files\n        const images = await this.parseImages(gl, desc, dir, bufferViews);\n\n        const textures = this.parseTextures(gl, desc, images);\n\n        // Just pass through material data for now\n        const materials = this.parseMaterials(gl, desc, textures);\n\n        // Fetch the inverse bind matrices for skeleton joints\n        const skins = this.parseSkins(gl, desc, bufferViews);\n\n        // Create geometries for each mesh primitive\n        const meshes = this.parseMeshes(gl, desc, bufferViews, materials, skins);\n\n        // Create transforms, meshes and hierarchy\n        const nodes = this.parseNodes(gl, desc, meshes, skins);\n\n        // Place nodes in skeletons\n        this.populateSkins(skins, nodes);\n\n        // Create animation handlers\n        const animations = this.parseAnimations(gl, desc, nodes, bufferViews);\n\n        // Get top level nodes for each scene\n        const scenes = this.parseScenes(desc, nodes);\n        const scene = scenes[desc.scene];\n\n        // Remove null nodes (instanced transforms)\n        for (let i = nodes.length; i >= 0; i--) if (!nodes[i]) nodes.splice(i, 1);\n\n        return {\n            json: desc,\n            buffers,\n            bufferViews,\n            images,\n            textures,\n            materials,\n            meshes,\n            nodes,\n            animations,\n            scenes,\n            scene,\n        };\n    }\n\n    static async parseDesc(src) {\n        if (!src.match(/\\.glb/)) {\n            return await fetch(src).then((res) => res.json());\n        } else {\n            return await fetch(src)\n                .then((res) => res.arrayBuffer())\n                .then((glb) => this.unpackGLB(glb));\n        }\n    }\n\n    // From https://github.com/donmccurdy/glTF-Transform/blob/e4108cc/packages/core/src/io/io.ts#L32\n    static unpackGLB(glb) {\n        // Decode and verify GLB header.\n        const header = new Uint32Array(glb, 0, 3);\n        if (header[0] !== 0x46546c67) {\n            throw new Error('Invalid glTF asset.');\n        } else if (header[1] !== 2) {\n            throw new Error(`Unsupported glTF binary version, \"${header[1]}\".`);\n        }\n        // Decode and verify chunk headers.\n        const jsonChunkHeader = new Uint32Array(glb, 12, 2);\n        const jsonByteOffset = 20;\n        const jsonByteLength = jsonChunkHeader[0];\n        if (jsonChunkHeader[1] !== 0x4e4f534a) {\n            throw new Error('Unexpected GLB layout.');\n        }\n\n        // Decode JSON.\n        const jsonText = new TextDecoder().decode(glb.slice(jsonByteOffset, jsonByteOffset + jsonByteLength));\n        const json = JSON.parse(jsonText);\n        // JSON only\n        if (jsonByteOffset + jsonByteLength === glb.byteLength) return json;\n\n        const binaryChunkHeader = new Uint32Array(glb, jsonByteOffset + jsonByteLength, 2);\n        if (binaryChunkHeader[1] !== 0x004e4942) {\n            throw new Error('Unexpected GLB layout.');\n        }\n        // Decode content.\n        const binaryByteOffset = jsonByteOffset + jsonByteLength + 8;\n        const binaryByteLength = binaryChunkHeader[0];\n        const binary = glb.slice(binaryByteOffset, binaryByteOffset + binaryByteLength);\n        // Attach binary to buffer\n        json.buffers[0].binary = binary;\n        return json;\n    }\n\n    // Threejs GLTF Loader https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/GLTFLoader.js#L1085\n    static resolveURI(uri, dir) {\n        // Invalid URI\n        if (typeof uri !== 'string' || uri === '') return '';\n\n        // Host Relative URI\n        if (/^https?:\\/\\//i.test(dir) && /^\\//.test(uri)) {\n            dir = dir.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n        }\n\n        // Absolute URI http://, https://, //\n        if (/^(https?:)?\\/\\//i.test(uri)) return uri;\n\n        // Data URI\n        if (/^data:.*,.*$/i.test(uri)) return uri;\n\n        // Blob URI\n        if (/^blob:.*$/i.test(uri)) return uri;\n\n        // Relative URI\n        return dir + uri;\n    }\n\n    static async loadBuffers(desc, dir) {\n        if (!desc.buffers) return null;\n        return await Promise.all(\n            desc.buffers.map((buffer) => {\n                // For GLB, binary buffer ready to go\n                if (buffer.binary) return buffer.binary;\n                const uri = this.resolveURI(buffer.uri, dir);\n                return fetch(uri).then((res) => res.arrayBuffer());\n            })\n        );\n    }\n\n    static parseBufferViews(gl, desc, buffers) {\n        if (!desc.bufferViews) return null;\n        // Clone to leave description pure\n        const bufferViews = desc.bufferViews.map((o) => Object.assign({}, o));\n\n        desc.meshes &&\n            desc.meshes.forEach(({ primitives }) => {\n                primitives.forEach(({ attributes, indices }) => {\n                    // Flag bufferView as an attribute, so it knows to create a gl buffer\n                    for (let attr in attributes) bufferViews[desc.accessors[attributes[attr]].bufferView].isAttribute = true;\n\n                    if (indices === undefined) return;\n                    bufferViews[desc.accessors[indices].bufferView].isAttribute = true;\n\n                    // Make sure indices bufferView have a target property for gl buffer binding\n                    bufferViews[desc.accessors[indices].bufferView].target = gl.ELEMENT_ARRAY_BUFFER;\n                });\n            });\n\n        // Get componentType of each bufferView from the accessors\n        desc.accessors.forEach(({ bufferView: i, componentType }) => {\n            bufferViews[i].componentType = componentType;\n        });\n\n        // Get mimetype of bufferView from images\n        desc.images &&\n            desc.images.forEach(({ uri, bufferView: i, mimeType }) => {\n                if (i === undefined) return;\n                bufferViews[i].mimeType = mimeType;\n            });\n\n        // Push each bufferView to the GPU as a separate buffer\n        bufferViews.forEach(\n            (\n                {\n                    buffer: bufferIndex, // required\n                    byteOffset = 0, // optional\n                    byteLength, // required\n                    byteStride, // optional\n                    target = gl.ARRAY_BUFFER, // optional, added above for elements\n                    name, // optional\n                    extensions, // optional\n                    extras, // optional\n\n                    componentType, // optional, added from accessor above\n                    mimeType, // optional, added from images above\n                    isAttribute,\n                },\n                i\n            ) => {\n                // For basis, just slice buffer\n                if (mimeType === 'image/ktx2') {\n                    bufferViews[i].data = buffers[bufferIndex].slice(byteOffset, byteOffset + byteLength);\n                    return;\n                }\n\n                const TypeArray = TYPE_ARRAY[componentType || mimeType];\n                const elementBytes = TypeArray.BYTES_PER_ELEMENT;\n\n                const data = new TypeArray(buffers[bufferIndex], byteOffset, byteLength / elementBytes);\n                bufferViews[i].data = data;\n                bufferViews[i].originalBuffer = buffers[bufferIndex];\n\n                if (!isAttribute) return;\n                // Create gl buffers for the bufferView, pushing it to the GPU\n                const buffer = gl.createBuffer();\n                gl.bindBuffer(target, buffer);\n                gl.renderer.state.boundBuffer = buffer;\n                gl.bufferData(target, data, gl.STATIC_DRAW);\n                bufferViews[i].buffer = buffer;\n            }\n        );\n\n        return bufferViews;\n    }\n\n    static async parseImages(gl, desc, dir, bufferViews) {\n        if (!desc.images) return null;\n        return await Promise.all(\n            desc.images.map(async ({ uri, bufferView: bufferViewIndex, mimeType, name }) => {\n                if (mimeType === 'image/ktx2') {\n                    const { data } = bufferViews[bufferViewIndex];\n                    const image = await this.basisManager.parseTexture(data);\n                    return image;\n                }\n\n                // jpg / png\n                const image = new Image();\n                image.name = name;\n                if (uri) {\n                    image.src = this.resolveURI(uri, dir);\n                } else if (bufferViewIndex !== undefined) {\n                    const { data } = bufferViews[bufferViewIndex];\n                    const blob = new Blob([data], { type: mimeType });\n                    image.src = URL.createObjectURL(blob);\n                }\n                image.ready = new Promise((res) => {\n                    image.onload = () => res();\n                });\n                return image;\n            })\n        );\n    }\n\n    static parseTextures(gl, desc, images) {\n        if (!desc.textures) return null;\n        return desc.textures.map(({ sampler: samplerIndex, source: sourceIndex, name, extensions, extras }) => {\n            if (sourceIndex === undefined && !!extensions) {\n                // Basis extension source index\n                if (extensions.KHR_texture_basisu) sourceIndex = extensions.KHR_texture_basisu.source;\n            }\n\n            const options = {\n                flipY: false,\n                wrapS: gl.REPEAT, // Repeat by default, opposed to OGL's clamp by default\n                wrapT: gl.REPEAT,\n            };\n            const sampler = samplerIndex !== undefined ? desc.samplers[samplerIndex] : null;\n            if (sampler) {\n                ['magFilter', 'minFilter', 'wrapS', 'wrapT'].forEach((prop) => {\n                    if (sampler[prop]) options[prop] = sampler[prop];\n                });\n            }\n\n            const image = images[sourceIndex];\n\n            // For compressed textures\n            if (image.isBasis) {\n                options.image = image;\n                options.internalFormat = image.internalFormat;\n                if (image.isCompressedTexture) {\n                    options.generateMipmaps = false;\n                    if (image.length > 1) this.minFilter = gl.NEAREST_MIPMAP_LINEAR;\n                }\n                const texture = new Texture(gl, options);\n                texture.name = name;\n                return texture;\n            }\n\n            const texture = new Texture(gl, options);\n            texture.name = name;\n            image.ready.then(() => {\n                texture.image = image;\n            });\n\n            return texture;\n        });\n    }\n\n    static parseMaterials(gl, desc, textures) {\n        if (!desc.materials) return null;\n        return desc.materials.map(\n            ({\n                name,\n                extensions,\n                extras,\n                pbrMetallicRoughness = {},\n                normalTexture,\n                occlusionTexture,\n                emissiveTexture,\n                emissiveFactor = [0, 0, 0],\n                alphaMode = 'OPAQUE',\n                alphaCutoff = 0.5,\n                doubleSided = false,\n            }) => {\n                const {\n                    baseColorFactor = [1, 1, 1, 1],\n                    baseColorTexture,\n                    metallicFactor = 1,\n                    roughnessFactor = 1,\n                    metallicRoughnessTexture,\n                    //   extensions,\n                    //   extras,\n                } = pbrMetallicRoughness;\n\n                if (baseColorTexture) {\n                    baseColorTexture.texture = textures[baseColorTexture.index];\n                    // texCoord\n                }\n                if (normalTexture) {\n                    normalTexture.texture = textures[normalTexture.index];\n                    // scale: 1\n                    // texCoord\n                }\n                if (metallicRoughnessTexture) {\n                    metallicRoughnessTexture.texture = textures[metallicRoughnessTexture.index];\n                    // texCoord\n                }\n                if (occlusionTexture) {\n                    occlusionTexture.texture = textures[occlusionTexture.index];\n                    // strength 1\n                    // texCoord\n                }\n                if (emissiveTexture) {\n                    emissiveTexture.texture = textures[emissiveTexture.index];\n                    // texCoord\n                }\n\n                return {\n                    name,\n                    baseColorFactor,\n                    baseColorTexture,\n                    metallicFactor,\n                    roughnessFactor,\n                    metallicRoughnessTexture,\n                    normalTexture,\n                    occlusionTexture,\n                    emissiveTexture,\n                    emissiveFactor,\n                    alphaMode,\n                    alphaCutoff,\n                    doubleSided,\n                };\n            }\n        );\n    }\n\n    static parseSkins(gl, desc, bufferViews) {\n        if (!desc.skins) return null;\n        return desc.skins.map(\n            ({\n                inverseBindMatrices, // optional\n                skeleton, // optional\n                joints, // required\n                // name,\n                // extensions,\n                // extras,\n            }) => {\n                return {\n                    inverseBindMatrices: this.parseAccessor(inverseBindMatrices, desc, bufferViews),\n                    skeleton,\n                    joints,\n                };\n            }\n        );\n    }\n\n    static parseMeshes(gl, desc, bufferViews, materials, skins) {\n        if (!desc.meshes) return null;\n        return desc.meshes.map(\n            (\n                {\n                    primitives, // required\n                    weights, // optional\n                    name, // optional\n                    extensions, // optional\n                    extras, // optional\n                },\n                meshIndex\n            ) => {\n                // TODO: weights stuff ?\n                // Parse through nodes to see how many instances there are\n                // and if there is a skin attached\n                let numInstances = 0;\n                let skinIndex = false;\n                desc.nodes &&\n                    desc.nodes.forEach(({ mesh, skin }) => {\n                        if (mesh === meshIndex) {\n                            numInstances++;\n                            if (skin !== undefined) skinIndex = skin;\n                        }\n                    });\n\n                primitives = this.parsePrimitives(gl, primitives, desc, bufferViews, materials, numInstances).map(({ geometry, program, mode }) => {\n                    // Create either skinned mesh or regular mesh\n                    const mesh =\n                        typeof skinIndex === 'number'\n                            ? new GLTFSkin(gl, { skeleton: skins[skinIndex], geometry, program, mode })\n                            : new Mesh(gl, { geometry, program, mode });\n                    mesh.name = name;\n                    if (mesh.geometry.isInstanced) {\n                        // Tag mesh so that nodes can add their transforms to the instance attribute\n                        mesh.numInstances = numInstances;\n                        // Avoid incorrect culling for instances\n                        mesh.frustumCulled = false;\n                    }\n                    return mesh;\n                });\n\n                return {\n                    primitives,\n                    weights,\n                    name,\n                };\n            }\n        );\n    }\n\n    static parsePrimitives(gl, primitives, desc, bufferViews, materials, numInstances) {\n        return primitives.map(\n            ({\n                attributes, // required\n                indices, // optional\n                material: materialIndex, // optional\n                mode = 4, // optional\n                targets, // optional\n                extensions, // optional\n                extras, // optional\n            }) => {\n                const geometry = new Geometry(gl);\n\n                // Add each attribute found in primitive\n                for (let attr in attributes) {\n                    geometry.addAttribute(ATTRIBUTES[attr], this.parseAccessor(attributes[attr], desc, bufferViews));\n                }\n\n                // Add index attribute if found\n                if (indices !== undefined) {\n                    geometry.addAttribute('index', this.parseAccessor(indices, desc, bufferViews));\n                }\n\n                // Add instanced transform attribute if multiple instances\n                if (numInstances > 1) {\n                    geometry.addAttribute('instanceMatrix', {\n                        instanced: 1,\n                        size: 16,\n                        data: new Float32Array(numInstances * 16),\n                    });\n                }\n\n                // TODO: materials\n                const program = new NormalProgram(gl);\n                if (materialIndex !== undefined) {\n                    program.gltfMaterial = materials[materialIndex];\n                }\n\n                return {\n                    geometry,\n                    program,\n                    mode,\n                };\n            }\n        );\n    }\n\n    static parseAccessor(index, desc, bufferViews) {\n        // TODO: init missing bufferView with 0s\n        // TODO: support sparse\n\n        const {\n            bufferView: bufferViewIndex, // optional\n            byteOffset = 0, // optional\n            componentType, // required\n            normalized = false, // optional\n            count, // required\n            type, // required\n            min, // optional\n            max, // optional\n            sparse, // optional\n            // name, // optional\n            // extensions, // optional\n            // extras, // optional\n        } = desc.accessors[index];\n\n        const {\n            data, // attached in parseBufferViews\n            originalBuffer, // attached in parseBufferViews\n            buffer, // replaced to be the actual GL buffer\n            byteOffset: bufferByteOffset = 0,\n            // byteLength, // applied in parseBufferViews\n            byteStride = 0,\n            target,\n            // name,\n            // extensions,\n            // extras,\n        } = bufferViews[bufferViewIndex];\n\n        const size = TYPE_SIZE[type];\n\n        // Parse data from joined buffers\n        const TypeArray = TYPE_ARRAY[componentType];\n        const elementBytes = data.BYTES_PER_ELEMENT;\n        const componentOffset = byteOffset / elementBytes;\n        const componentStride = byteStride / elementBytes;\n        const isInterleaved = !!byteStride && componentStride !== size;\n\n        // TODO: interleaved\n        const newData = isInterleaved ? data : new TypeArray(originalBuffer, byteOffset + bufferByteOffset, count * size);\n\n        // Return attribute data\n        return {\n            data: newData,\n            size,\n            type: componentType,\n            normalized,\n            buffer,\n            stride: byteStride,\n            offset: byteOffset,\n            count,\n            min,\n            max,\n        };\n    }\n\n    static parseNodes(gl, desc, meshes, skins) {\n        if (!desc.nodes) return null;\n        const nodes = desc.nodes.map(\n            ({\n                camera, // optional\n                children, // optional\n                skin: skinIndex, // optional\n                matrix, // optional\n                mesh: meshIndex, // optional\n                rotation, // optional\n                scale, // optional\n                translation, // optional\n                weights, // optional\n                name, // optional\n                extensions, // optional\n                extras, // optional\n            }) => {\n                const node = new Transform();\n                if (name) node.name = name;\n\n                // Apply transformations\n                if (matrix) {\n                    node.matrix.copy(matrix);\n                    node.decompose();\n                } else {\n                    if (rotation) node.quaternion.copy(rotation);\n                    if (scale) node.scale.copy(scale);\n                    if (translation) node.position.copy(translation);\n                    node.updateMatrix();\n                }\n\n                // Flags for avoiding duplicate transforms and removing unused instance nodes\n                let isInstanced = false;\n                let isFirstInstance = true;\n\n                // add mesh if included\n                if (meshIndex !== undefined) {\n                    meshes[meshIndex].primitives.forEach((mesh) => {\n                        if (mesh.geometry.isInstanced) {\n                            isInstanced = true;\n                            if (!mesh.instanceCount) {\n                                mesh.instanceCount = 0;\n                            } else {\n                                isFirstInstance = false;\n                            }\n                            node.matrix.toArray(mesh.geometry.attributes.instanceMatrix.data, mesh.instanceCount * 16);\n                            mesh.instanceCount++;\n\n                            if (mesh.instanceCount === mesh.numInstances) {\n                                // Remove properties once all instances added\n                                delete mesh.numInstances;\n                                delete mesh.instanceCount;\n                                // Flag attribute as dirty\n                                mesh.geometry.attributes.instanceMatrix.needsUpdate = true;\n                            }\n                        }\n\n                        // For instances, only the first node will actually have the mesh\n                        if (isInstanced) {\n                            if (isFirstInstance) mesh.setParent(node);\n                        } else {\n                            mesh.setParent(node);\n                        }\n                    });\n                }\n\n                // Reset node if instanced to not duplicate transforms\n                if (isInstanced) {\n                    // Remove unused nodes just providing an instance transform\n                    if (!isFirstInstance) return null;\n                    // Avoid duplicate transform for node containing the instanced mesh\n                    node.matrix.identity();\n                    node.decompose();\n                }\n\n                return node;\n            }\n        );\n\n        desc.nodes.forEach(({ children = [] }, i) => {\n            // Set hierarchy now all nodes created\n            children.forEach((childIndex) => {\n                if (!nodes[childIndex]) return;\n                nodes[childIndex].setParent(nodes[i]);\n            });\n        });\n\n        return nodes;\n    }\n\n    static populateSkins(skins, nodes) {\n        if (!skins) return;\n        skins.forEach((skin) => {\n            skin.joints = skin.joints.map((i, index) => {\n                const joint = nodes[i];\n                joint.bindInverse = new Mat4(...skin.inverseBindMatrices.data.slice(index * 16, (index + 1) * 16));\n                return joint;\n            });\n            if (skin.skeleton) skin.skeleton = nodes[skin.skeleton];\n        });\n    }\n\n    static parseAnimations(gl, desc, nodes, bufferViews) {\n        if (!desc.animations) return null;\n        return desc.animations.map(\n            ({\n                channels, // required\n                samplers, // required\n                name, // optional\n                // extensions, // optional\n                // extras,  // optional\n            }) => {\n                const data = channels.map(\n                    ({\n                        sampler: samplerIndex, // required\n                        target, // required\n                        // extensions, // optional\n                        // extras, // optional\n                    }) => {\n                        const {\n                            input: inputIndex, // required\n                            interpolation = 'LINEAR',\n                            output: outputIndex, // required\n                            // extensions, // optional\n                            // extras, // optional\n                        } = samplers[samplerIndex];\n\n                        const {\n                            node: nodeIndex, // optional - TODO: when is it not included?\n                            path, // required\n                            // extensions, // optional\n                            // extras, // optional\n                        } = target;\n\n                        const node = nodes[nodeIndex];\n                        const transform = TRANSFORMS[path];\n                        const times = this.parseAccessor(inputIndex, desc, bufferViews).data;\n                        const values = this.parseAccessor(outputIndex, desc, bufferViews).data;\n\n                        return {\n                            node,\n                            transform,\n                            interpolation,\n                            times,\n                            values,\n                        };\n                    }\n                );\n\n                return {\n                    name,\n                    animation: new GLTFAnimation(data),\n                };\n            }\n        );\n    }\n\n    static parseScenes(desc, nodes) {\n        if (!desc.scenes) return null;\n        return desc.scenes.map(\n            ({\n                nodes: nodesIndices = [],\n                name, // optional\n                extensions,\n                extras,\n            }) => {\n                return nodesIndices.reduce((map, i) => {\n                    // Don't add null nodes (instanced transforms)\n                    if (nodes[i]) map.push(nodes[i]);\n                    return map;\n                }, []);\n            }\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}