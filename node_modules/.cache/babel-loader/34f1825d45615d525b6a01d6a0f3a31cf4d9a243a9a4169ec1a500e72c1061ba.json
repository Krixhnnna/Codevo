{"ast":null,"code":"// TODO: Destroy render targets if size changed and exists\n\nimport { Program } from '../core/Program.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { RenderTarget } from '../core/RenderTarget.js';\nimport { Triangle } from './Triangle.js';\nexport class Post {\n  constructor(gl) {\n    let {\n      width,\n      height,\n      dpr,\n      wrapS = gl.CLAMP_TO_EDGE,\n      wrapT = gl.CLAMP_TO_EDGE,\n      minFilter = gl.LINEAR,\n      magFilter = gl.LINEAR,\n      geometry = new Triangle(gl),\n      targetOnly = null\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.gl = gl;\n    this.options = {\n      wrapS,\n      wrapT,\n      minFilter,\n      magFilter\n    };\n    this.passes = [];\n    this.geometry = geometry;\n    this.uniform = {\n      value: null\n    };\n    this.targetOnly = targetOnly;\n    const fbo = this.fbo = {\n      read: null,\n      write: null,\n      swap: () => {\n        let temp = fbo.read;\n        fbo.read = fbo.write;\n        fbo.write = temp;\n      }\n    };\n    this.resize({\n      width,\n      height,\n      dpr\n    });\n  }\n  addPass() {\n    let {\n      vertex = defaultVertex,\n      fragment = defaultFragment,\n      uniforms = {},\n      textureUniform = 'tMap',\n      enabled = true\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    uniforms[textureUniform] = {\n      value: this.fbo.read.texture\n    };\n    const program = new Program(this.gl, {\n      vertex,\n      fragment,\n      uniforms\n    });\n    const mesh = new Mesh(this.gl, {\n      geometry: this.geometry,\n      program\n    });\n    const pass = {\n      mesh,\n      program,\n      uniforms,\n      enabled,\n      textureUniform\n    };\n    this.passes.push(pass);\n    return pass;\n  }\n  resize() {\n    let {\n      width,\n      height,\n      dpr\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (dpr) this.dpr = dpr;\n    if (width) {\n      this.width = width;\n      this.height = height || width;\n    }\n    dpr = this.dpr || this.gl.renderer.dpr;\n    width = Math.floor((this.width || this.gl.renderer.width) * dpr);\n    height = Math.floor((this.height || this.gl.renderer.height) * dpr);\n    this.options.width = width;\n    this.options.height = height;\n    this.fbo.read = new RenderTarget(this.gl, this.options);\n    this.fbo.write = new RenderTarget(this.gl, this.options);\n  }\n\n  // Uses same arguments as renderer.render, with addition of optional texture passed in to avoid scene render\n  render(_ref) {\n    let {\n      scene,\n      camera,\n      texture,\n      target = null,\n      update = true,\n      sort = true,\n      frustumCull = true\n    } = _ref;\n    const enabledPasses = this.passes.filter(pass => pass.enabled);\n    if (!texture) {\n      this.gl.renderer.render({\n        scene,\n        camera,\n        target: enabledPasses.length || !target && this.targetOnly ? this.fbo.write : target,\n        update,\n        sort,\n        frustumCull\n      });\n      this.fbo.swap();\n    }\n    enabledPasses.forEach((pass, i) => {\n      pass.mesh.program.uniforms[pass.textureUniform].value = !i && texture ? texture : this.fbo.read.texture;\n      this.gl.renderer.render({\n        scene: pass.mesh,\n        target: i === enabledPasses.length - 1 && (target || !this.targetOnly) ? target : this.fbo.write,\n        clear: true\n      });\n      this.fbo.swap();\n    });\n    this.uniform.value = this.fbo.read.texture;\n  }\n}\nconst defaultVertex = /* glsl */\"\\n    attribute vec2 uv;\\n    attribute vec2 position;\\n\\n    varying vec2 vUv;\\n\\n    void main() {\\n        vUv = uv;\\n        gl_Position = vec4(position, 0, 1);\\n    }\\n\";\nconst defaultFragment = /* glsl */\"\\n    precision highp float;\\n\\n    uniform sampler2D tMap;\\n    varying vec2 vUv;\\n\\n    void main() {\\n        gl_FragColor = texture2D(tMap, vUv);\\n    }\\n\";","map":{"version":3,"names":["Program","Mesh","RenderTarget","Triangle","Post","constructor","gl","width","height","dpr","wrapS","CLAMP_TO_EDGE","wrapT","minFilter","LINEAR","magFilter","geometry","targetOnly","arguments","length","undefined","options","passes","uniform","value","fbo","read","write","swap","temp","resize","addPass","vertex","defaultVertex","fragment","defaultFragment","uniforms","textureUniform","enabled","texture","program","mesh","pass","push","renderer","Math","floor","render","_ref","scene","camera","target","update","sort","frustumCull","enabledPasses","filter","forEach","i","clear"],"sources":["/Users/krishnapandey/Desktop/Codevo/node_modules/ogl/src/extras/Post.js"],"sourcesContent":["// TODO: Destroy render targets if size changed and exists\n\nimport { Program } from '../core/Program.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { RenderTarget } from '../core/RenderTarget.js';\nimport { Triangle } from './Triangle.js';\n\nexport class Post {\n    constructor(\n        gl,\n        {\n            width,\n            height,\n            dpr,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            minFilter = gl.LINEAR,\n            magFilter = gl.LINEAR,\n            geometry = new Triangle(gl),\n            targetOnly = null,\n        } = {}\n    ) {\n        this.gl = gl;\n\n        this.options = { wrapS, wrapT, minFilter, magFilter };\n\n        this.passes = [];\n\n        this.geometry = geometry;\n\n        this.uniform = { value: null };\n        this.targetOnly = targetOnly;\n\n        const fbo = (this.fbo = {\n            read: null,\n            write: null,\n            swap: () => {\n                let temp = fbo.read;\n                fbo.read = fbo.write;\n                fbo.write = temp;\n            },\n        });\n\n        this.resize({ width, height, dpr });\n    }\n\n    addPass({ vertex = defaultVertex, fragment = defaultFragment, uniforms = {}, textureUniform = 'tMap', enabled = true } = {}) {\n        uniforms[textureUniform] = { value: this.fbo.read.texture };\n\n        const program = new Program(this.gl, { vertex, fragment, uniforms });\n        const mesh = new Mesh(this.gl, { geometry: this.geometry, program });\n\n        const pass = {\n            mesh,\n            program,\n            uniforms,\n            enabled,\n            textureUniform,\n        };\n\n        this.passes.push(pass);\n        return pass;\n    }\n\n    resize({ width, height, dpr } = {}) {\n        if (dpr) this.dpr = dpr;\n        if (width) {\n            this.width = width;\n            this.height = height || width;\n        }\n\n        dpr = this.dpr || this.gl.renderer.dpr;\n        width = Math.floor((this.width || this.gl.renderer.width) * dpr);\n        height = Math.floor((this.height || this.gl.renderer.height) * dpr);\n\n        this.options.width = width;\n        this.options.height = height;\n\n        this.fbo.read = new RenderTarget(this.gl, this.options);\n        this.fbo.write = new RenderTarget(this.gl, this.options);\n    }\n\n    // Uses same arguments as renderer.render, with addition of optional texture passed in to avoid scene render\n    render({ scene, camera, texture, target = null, update = true, sort = true, frustumCull = true }) {\n        const enabledPasses = this.passes.filter((pass) => pass.enabled);\n\n        if (!texture) {\n            this.gl.renderer.render({\n                scene,\n                camera,\n                target: enabledPasses.length || (!target && this.targetOnly) ? this.fbo.write : target,\n                update,\n                sort,\n                frustumCull,\n            });\n            this.fbo.swap();\n        }\n\n        enabledPasses.forEach((pass, i) => {\n            pass.mesh.program.uniforms[pass.textureUniform].value = !i && texture ? texture : this.fbo.read.texture;\n            this.gl.renderer.render({\n                scene: pass.mesh,\n                target: i === enabledPasses.length - 1 && (target || !this.targetOnly) ? target : this.fbo.write,\n                clear: true,\n            });\n            this.fbo.swap();\n        });\n\n        this.uniform.value = this.fbo.read.texture;\n    }\n}\n\nconst defaultVertex = /* glsl */ `\n    attribute vec2 uv;\n    attribute vec2 position;\n\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0, 1);\n    }\n`;\n\nconst defaultFragment = /* glsl */ `\n    precision highp float;\n\n    uniform sampler2D tMap;\n    varying vec2 vUv;\n\n    void main() {\n        gl_FragColor = texture2D(tMap, vUv);\n    }\n`;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}