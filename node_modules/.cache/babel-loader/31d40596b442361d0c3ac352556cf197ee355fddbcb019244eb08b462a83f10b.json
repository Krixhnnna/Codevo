{"ast":null,"code":"import{useEffect,useRef}from\"react\";import{Renderer,Camera,Geometry,Program,Mesh}from\"ogl\";import'./Particles.css';import{jsx as _jsx}from\"react/jsx-runtime\";const defaultColors=[\"#ffffff\",\"#ffffff\",\"#ffffff\"];const hexToRgb=hex=>{hex=hex.replace(/^#/,\"\");if(hex.length===3){hex=hex.split(\"\").map(c=>c+c).join(\"\");}const int=parseInt(hex,16);const r=(int>>16&255)/255;const g=(int>>8&255)/255;const b=(int&255)/255;return[r,g,b];};const vertex=/* glsl */\"\\n  attribute vec3 position;\\n  attribute vec4 random;\\n  attribute vec3 color;\\n  \\n  uniform mat4 modelMatrix;\\n  uniform mat4 viewMatrix;\\n  uniform mat4 projectionMatrix;\\n  uniform float uTime;\\n  uniform float uSpread;\\n  uniform float uBaseSize;\\n  uniform float uSizeRandomness;\\n  \\n  varying vec4 vRandom;\\n  varying vec3 vColor;\\n  \\n  void main() {\\n    vRandom = random;\\n    vColor = color;\\n    \\n    vec3 pos = position * uSpread;\\n    pos.z *= 10.0;\\n    \\n    vec4 mPos = modelMatrix * vec4(pos, 1.0);\\n    float t = uTime;\\n    mPos.x += sin(t * random.z + 6.28 * random.w) * mix(0.1, 1.5, random.x);\\n    mPos.y += sin(t * random.y + 6.28 * random.x) * mix(0.1, 1.5, random.w);\\n    mPos.z += sin(t * random.w + 6.28 * random.y) * mix(0.1, 1.5, random.z);\\n    \\n    vec4 mvPos = viewMatrix * mPos;\\n    gl_PointSize = (uBaseSize * (1.0 + uSizeRandomness * (random.x - 0.5))) / length(mvPos.xyz);\\n    gl_Position = projectionMatrix * mvPos;\\n  }\\n\";const fragment=/* glsl */\"\\n  precision highp float;\\n  \\n  uniform float uTime;\\n  uniform float uAlphaParticles;\\n  varying vec4 vRandom;\\n  varying vec3 vColor;\\n  \\n  void main() {\\n    vec2 uv = gl_PointCoord.xy;\\n    float d = length(uv - vec2(0.5));\\n    \\n    if(uAlphaParticles < 0.5) {\\n      if(d > 0.5) {\\n        discard;\\n      }\\n      gl_FragColor = vec4(vColor + 0.2 * sin(uv.yxx + uTime + vRandom.y * 6.28), 1.0);\\n    } else {\\n      float circle = smoothstep(0.5, 0.4, d) * 0.8;\\n      gl_FragColor = vec4(vColor + 0.2 * sin(uv.yxx + uTime + vRandom.y * 6.28), circle);\\n    }\\n  }\\n\";const Particles=_ref=>{let{particleCount=200,particleSpread=10,speed=0.1,particleColors,moveParticlesOnHover=false,particleHoverFactor=1,alphaParticles=false,particleBaseSize=100,sizeRandomness=1,cameraDistance=20,disableRotation=false,className}=_ref;const containerRef=useRef(null);const mouseRef=useRef({x:0,y:0});useEffect(()=>{const container=containerRef.current;if(!container)return;const renderer=new Renderer({depth:false,alpha:true});const gl=renderer.gl;container.appendChild(gl.canvas);gl.clearColor(0,0,0,0);const camera=new Camera(gl,{fov:15});camera.position.set(0,0,cameraDistance);const resize=()=>{const width=container.clientWidth;const height=container.clientHeight;renderer.setSize(width,height);camera.perspective({aspect:gl.canvas.width/gl.canvas.height});};window.addEventListener(\"resize\",resize,false);resize();const handleMouseMove=e=>{const rect=container.getBoundingClientRect();const x=(e.clientX-rect.left)/rect.width*2-1;const y=-((e.clientY-rect.top)/rect.height*2-1);mouseRef.current={x,y};};if(moveParticlesOnHover){container.addEventListener(\"mousemove\",handleMouseMove);}const count=particleCount;const positions=new Float32Array(count*3);const randoms=new Float32Array(count*4);const colors=new Float32Array(count*3);const palette=particleColors&&particleColors.length>0?particleColors:defaultColors;for(let i=0;i<count;i++){let x,y,z,len;do{x=Math.random()*2-1;y=Math.random()*2-1;z=Math.random()*2-1;len=x*x+y*y+z*z;}while(len>1||len===0);const r=Math.cbrt(Math.random());positions.set([x*r,y*r,z*r],i*3);randoms.set([Math.random(),Math.random(),Math.random(),Math.random()],i*4);const col=hexToRgb(palette[Math.floor(Math.random()*palette.length)]);colors.set(col,i*3);}const geometry=new Geometry(gl,{position:{size:3,data:positions},random:{size:4,data:randoms},color:{size:3,data:colors}});const program=new Program(gl,{vertex,fragment,uniforms:{uTime:{value:0},uSpread:{value:particleSpread},uBaseSize:{value:particleBaseSize},uSizeRandomness:{value:sizeRandomness},uAlphaParticles:{value:alphaParticles?1:0}},transparent:true,depthTest:false});const particles=new Mesh(gl,{mode:gl.POINTS,geometry,program});let animationFrameId;let lastTime=performance.now();let elapsed=0;const update=t=>{animationFrameId=requestAnimationFrame(update);const delta=t-lastTime;lastTime=t;elapsed+=delta*speed;program.uniforms.uTime.value=elapsed*0.001;if(moveParticlesOnHover){particles.position.x=-mouseRef.current.x*particleHoverFactor;particles.position.y=-mouseRef.current.y*particleHoverFactor;}else{particles.position.x=0;particles.position.y=0;}if(!disableRotation){particles.rotation.x=Math.sin(elapsed*0.0002)*0.1;particles.rotation.y=Math.cos(elapsed*0.0005)*0.15;particles.rotation.z+=0.01*speed;}renderer.render({scene:particles,camera});};animationFrameId=requestAnimationFrame(update);return()=>{window.removeEventListener(\"resize\",resize);if(moveParticlesOnHover){container.removeEventListener(\"mousemove\",handleMouseMove);}cancelAnimationFrame(animationFrameId);if(container.contains(gl.canvas)){container.removeChild(gl.canvas);}};},[particleCount,particleSpread,speed,moveParticlesOnHover,particleHoverFactor,alphaParticles,particleBaseSize,sizeRandomness,cameraDistance,disableRotation]);return/*#__PURE__*/_jsx(\"div\",{ref:containerRef,className:\"particles-container \".concat(className)});};export default Particles;","map":{"version":3,"names":["useEffect","useRef","Renderer","Camera","Geometry","Program","Mesh","jsx","_jsx","defaultColors","hexToRgb","hex","replace","length","split","map","c","join","int","parseInt","r","g","b","vertex","fragment","Particles","_ref","particleCount","particleSpread","speed","particleColors","moveParticlesOnHover","particleHoverFactor","alphaParticles","particleBaseSize","sizeRandomness","cameraDistance","disableRotation","className","containerRef","mouseRef","x","y","container","current","renderer","depth","alpha","gl","appendChild","canvas","clearColor","camera","fov","position","set","resize","width","clientWidth","height","clientHeight","setSize","perspective","aspect","window","addEventListener","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","count","positions","Float32Array","randoms","colors","palette","i","z","len","Math","random","cbrt","col","floor","geometry","size","data","color","program","uniforms","uTime","value","uSpread","uBaseSize","uSizeRandomness","uAlphaParticles","transparent","depthTest","particles","mode","POINTS","animationFrameId","lastTime","performance","now","elapsed","update","t","requestAnimationFrame","delta","rotation","sin","cos","render","scene","removeEventListener","cancelAnimationFrame","contains","removeChild","ref","concat"],"sources":["/Users/krishnapandey/Desktop/Codevo/src/components/Particles.jsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { Renderer, Camera, Geometry, Program, Mesh } from \"ogl\";\nimport './Particles.css';\n\nconst defaultColors = [\"#ffffff\", \"#ffffff\", \"#ffffff\"];\n\nconst hexToRgb = (hex) => {\n  hex = hex.replace(/^#/, \"\");\n  if (hex.length === 3) {\n    hex = hex.split(\"\").map((c) => c + c).join(\"\");\n  }\n  const int = parseInt(hex, 16);\n  const r = ((int >> 16) & 255) / 255;\n  const g = ((int >> 8) & 255) / 255;\n  const b = (int & 255) / 255;\n  return [r, g, b];\n};\n\nconst vertex = /* glsl */ `\n  attribute vec3 position;\n  attribute vec4 random;\n  attribute vec3 color;\n  \n  uniform mat4 modelMatrix;\n  uniform mat4 viewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform float uTime;\n  uniform float uSpread;\n  uniform float uBaseSize;\n  uniform float uSizeRandomness;\n  \n  varying vec4 vRandom;\n  varying vec3 vColor;\n  \n  void main() {\n    vRandom = random;\n    vColor = color;\n    \n    vec3 pos = position * uSpread;\n    pos.z *= 10.0;\n    \n    vec4 mPos = modelMatrix * vec4(pos, 1.0);\n    float t = uTime;\n    mPos.x += sin(t * random.z + 6.28 * random.w) * mix(0.1, 1.5, random.x);\n    mPos.y += sin(t * random.y + 6.28 * random.x) * mix(0.1, 1.5, random.w);\n    mPos.z += sin(t * random.w + 6.28 * random.y) * mix(0.1, 1.5, random.z);\n    \n    vec4 mvPos = viewMatrix * mPos;\n    gl_PointSize = (uBaseSize * (1.0 + uSizeRandomness * (random.x - 0.5))) / length(mvPos.xyz);\n    gl_Position = projectionMatrix * mvPos;\n  }\n`;\n\nconst fragment = /* glsl */ `\n  precision highp float;\n  \n  uniform float uTime;\n  uniform float uAlphaParticles;\n  varying vec4 vRandom;\n  varying vec3 vColor;\n  \n  void main() {\n    vec2 uv = gl_PointCoord.xy;\n    float d = length(uv - vec2(0.5));\n    \n    if(uAlphaParticles < 0.5) {\n      if(d > 0.5) {\n        discard;\n      }\n      gl_FragColor = vec4(vColor + 0.2 * sin(uv.yxx + uTime + vRandom.y * 6.28), 1.0);\n    } else {\n      float circle = smoothstep(0.5, 0.4, d) * 0.8;\n      gl_FragColor = vec4(vColor + 0.2 * sin(uv.yxx + uTime + vRandom.y * 6.28), circle);\n    }\n  }\n`;\n\nconst Particles = ({\n  particleCount = 200,\n  particleSpread = 10,\n  speed = 0.1,\n  particleColors,\n  moveParticlesOnHover = false,\n  particleHoverFactor = 1,\n  alphaParticles = false,\n  particleBaseSize = 100,\n  sizeRandomness = 1,\n  cameraDistance = 20,\n  disableRotation = false,\n  className,\n}) => {\n  const containerRef = useRef(null);\n  const mouseRef = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const renderer = new Renderer({ depth: false, alpha: true });\n    const gl = renderer.gl;\n    container.appendChild(gl.canvas);\n    gl.clearColor(0, 0, 0, 0);\n\n    const camera = new Camera(gl, { fov: 15 });\n    camera.position.set(0, 0, cameraDistance);\n\n    const resize = () => {\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n      renderer.setSize(width, height);\n      camera.perspective({ aspect: gl.canvas.width / gl.canvas.height });\n    };\n    window.addEventListener(\"resize\", resize, false);\n    resize();\n\n    const handleMouseMove = (e) => {\n      const rect = container.getBoundingClientRect();\n      const x = ((e.clientX - rect.left) / rect.width) * 2 - 1;\n      const y = -(((e.clientY - rect.top) / rect.height) * 2 - 1);\n      mouseRef.current = { x, y };\n    };\n\n    if (moveParticlesOnHover) {\n      container.addEventListener(\"mousemove\", handleMouseMove);\n    }\n\n    const count = particleCount;\n    const positions = new Float32Array(count * 3);\n    const randoms = new Float32Array(count * 4);\n    const colors = new Float32Array(count * 3);\n    const palette = particleColors && particleColors.length > 0 ? particleColors : defaultColors;\n\n    for (let i = 0; i < count; i++) {\n      let x, y, z, len;\n      do {\n        x = Math.random() * 2 - 1;\n        y = Math.random() * 2 - 1;\n        z = Math.random() * 2 - 1;\n        len = x * x + y * y + z * z;\n      } while (len > 1 || len === 0);\n      const r = Math.cbrt(Math.random());\n      positions.set([x * r, y * r, z * r], i * 3);\n      randoms.set([Math.random(), Math.random(), Math.random(), Math.random()], i * 4);\n      const col = hexToRgb(palette[Math.floor(Math.random() * palette.length)]);\n      colors.set(col, i * 3);\n    }\n\n    const geometry = new Geometry(gl, {\n      position: { size: 3, data: positions },\n      random: { size: 4, data: randoms },\n      color: { size: 3, data: colors },\n    });\n\n    const program = new Program(gl, {\n      vertex,\n      fragment,\n      uniforms: {\n        uTime: { value: 0 },\n        uSpread: { value: particleSpread },\n        uBaseSize: { value: particleBaseSize },\n        uSizeRandomness: { value: sizeRandomness },\n        uAlphaParticles: { value: alphaParticles ? 1 : 0 },\n      },\n      transparent: true,\n      depthTest: false,\n    });\n\n    const particles = new Mesh(gl, { mode: gl.POINTS, geometry, program });\n\n    let animationFrameId;\n    let lastTime = performance.now();\n    let elapsed = 0;\n\n    const update = (t) => {\n      animationFrameId = requestAnimationFrame(update);\n      const delta = t - lastTime;\n      lastTime = t;\n      elapsed += delta * speed;\n\n      program.uniforms.uTime.value = elapsed * 0.001;\n\n      if (moveParticlesOnHover) {\n        particles.position.x = -mouseRef.current.x * particleHoverFactor;\n        particles.position.y = -mouseRef.current.y * particleHoverFactor;\n      } else {\n        particles.position.x = 0;\n        particles.position.y = 0;\n      }\n\n      if (!disableRotation) {\n        particles.rotation.x = Math.sin(elapsed * 0.0002) * 0.1;\n        particles.rotation.y = Math.cos(elapsed * 0.0005) * 0.15;\n        particles.rotation.z += 0.01 * speed;\n      }\n\n      renderer.render({ scene: particles, camera });\n    };\n\n    animationFrameId = requestAnimationFrame(update);\n\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n      if (moveParticlesOnHover) {\n        container.removeEventListener(\"mousemove\", handleMouseMove);\n      }\n      cancelAnimationFrame(animationFrameId);\n      if (container.contains(gl.canvas)) {\n        container.removeChild(gl.canvas);\n      }\n    };\n  }, [\n    particleCount,\n    particleSpread,\n    speed,\n    moveParticlesOnHover,\n    particleHoverFactor,\n    alphaParticles,\n    particleBaseSize,\n    sizeRandomness,\n    cameraDistance,\n    disableRotation,\n  ]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={`particles-container ${className}`}\n    />\n  );\n};\n\nexport default Particles; "],"mappings":"AAAA,OAASA,SAAS,CAAEC,MAAM,KAAQ,OAAO,CACzC,OAASC,QAAQ,CAAEC,MAAM,CAAEC,QAAQ,CAAEC,OAAO,CAAEC,IAAI,KAAQ,KAAK,CAC/D,MAAO,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEzB,KAAM,CAAAC,aAAa,CAAG,CAAC,SAAS,CAAE,SAAS,CAAE,SAAS,CAAC,CAEvD,KAAM,CAAAC,QAAQ,CAAIC,GAAG,EAAK,CACxBA,GAAG,CAAGA,GAAG,CAACC,OAAO,CAAC,IAAI,CAAE,EAAE,CAAC,CAC3B,GAAID,GAAG,CAACE,MAAM,GAAK,CAAC,CAAE,CACpBF,GAAG,CAAGA,GAAG,CAACG,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAEC,CAAC,EAAKA,CAAC,CAAGA,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAChD,CACA,KAAM,CAAAC,GAAG,CAAGC,QAAQ,CAACR,GAAG,CAAE,EAAE,CAAC,CAC7B,KAAM,CAAAS,CAAC,CAAG,CAAEF,GAAG,EAAI,EAAE,CAAI,GAAG,EAAI,GAAG,CACnC,KAAM,CAAAG,CAAC,CAAG,CAAEH,GAAG,EAAI,CAAC,CAAI,GAAG,EAAI,GAAG,CAClC,KAAM,CAAAI,CAAC,CAAG,CAACJ,GAAG,CAAG,GAAG,EAAI,GAAG,CAC3B,MAAO,CAACE,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAC,CAClB,CAAC,CAED,KAAM,CAAAC,MAAM,CAAG,o9BAiCd,CAED,KAAM,CAAAC,QAAQ,CAAG,6kBAsBhB,CAED,KAAM,CAAAC,SAAS,CAAGC,IAAA,EAaZ,IAba,CACjBC,aAAa,CAAG,GAAG,CACnBC,cAAc,CAAG,EAAE,CACnBC,KAAK,CAAG,GAAG,CACXC,cAAc,CACdC,oBAAoB,CAAG,KAAK,CAC5BC,mBAAmB,CAAG,CAAC,CACvBC,cAAc,CAAG,KAAK,CACtBC,gBAAgB,CAAG,GAAG,CACtBC,cAAc,CAAG,CAAC,CAClBC,cAAc,CAAG,EAAE,CACnBC,eAAe,CAAG,KAAK,CACvBC,SACF,CAAC,CAAAZ,IAAA,CACC,KAAM,CAAAa,YAAY,CAAGtC,MAAM,CAAC,IAAI,CAAC,CACjC,KAAM,CAAAuC,QAAQ,CAAGvC,MAAM,CAAC,CAAEwC,CAAC,CAAE,CAAC,CAAEC,CAAC,CAAE,CAAE,CAAC,CAAC,CAEvC1C,SAAS,CAAC,IAAM,CACd,KAAM,CAAA2C,SAAS,CAAGJ,YAAY,CAACK,OAAO,CACtC,GAAI,CAACD,SAAS,CAAE,OAEhB,KAAM,CAAAE,QAAQ,CAAG,GAAI,CAAA3C,QAAQ,CAAC,CAAE4C,KAAK,CAAE,KAAK,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAC,CAC5D,KAAM,CAAAC,EAAE,CAAGH,QAAQ,CAACG,EAAE,CACtBL,SAAS,CAACM,WAAW,CAACD,EAAE,CAACE,MAAM,CAAC,CAChCF,EAAE,CAACG,UAAU,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAEzB,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAjD,MAAM,CAAC6C,EAAE,CAAE,CAAEK,GAAG,CAAE,EAAG,CAAC,CAAC,CAC1CD,MAAM,CAACE,QAAQ,CAACC,GAAG,CAAC,CAAC,CAAE,CAAC,CAAEnB,cAAc,CAAC,CAEzC,KAAM,CAAAoB,MAAM,CAAGA,CAAA,GAAM,CACnB,KAAM,CAAAC,KAAK,CAAGd,SAAS,CAACe,WAAW,CACnC,KAAM,CAAAC,MAAM,CAAGhB,SAAS,CAACiB,YAAY,CACrCf,QAAQ,CAACgB,OAAO,CAACJ,KAAK,CAAEE,MAAM,CAAC,CAC/BP,MAAM,CAACU,WAAW,CAAC,CAAEC,MAAM,CAAEf,EAAE,CAACE,MAAM,CAACO,KAAK,CAAGT,EAAE,CAACE,MAAM,CAACS,MAAO,CAAC,CAAC,CACpE,CAAC,CACDK,MAAM,CAACC,gBAAgB,CAAC,QAAQ,CAAET,MAAM,CAAE,KAAK,CAAC,CAChDA,MAAM,CAAC,CAAC,CAER,KAAM,CAAAU,eAAe,CAAIC,CAAC,EAAK,CAC7B,KAAM,CAAAC,IAAI,CAAGzB,SAAS,CAAC0B,qBAAqB,CAAC,CAAC,CAC9C,KAAM,CAAA5B,CAAC,CAAI,CAAC0B,CAAC,CAACG,OAAO,CAAGF,IAAI,CAACG,IAAI,EAAIH,IAAI,CAACX,KAAK,CAAI,CAAC,CAAG,CAAC,CACxD,KAAM,CAAAf,CAAC,CAAG,EAAG,CAACyB,CAAC,CAACK,OAAO,CAAGJ,IAAI,CAACK,GAAG,EAAIL,IAAI,CAACT,MAAM,CAAI,CAAC,CAAG,CAAC,CAAC,CAC3DnB,QAAQ,CAACI,OAAO,CAAG,CAAEH,CAAC,CAAEC,CAAE,CAAC,CAC7B,CAAC,CAED,GAAIX,oBAAoB,CAAE,CACxBY,SAAS,CAACsB,gBAAgB,CAAC,WAAW,CAAEC,eAAe,CAAC,CAC1D,CAEA,KAAM,CAAAQ,KAAK,CAAG/C,aAAa,CAC3B,KAAM,CAAAgD,SAAS,CAAG,GAAI,CAAAC,YAAY,CAACF,KAAK,CAAG,CAAC,CAAC,CAC7C,KAAM,CAAAG,OAAO,CAAG,GAAI,CAAAD,YAAY,CAACF,KAAK,CAAG,CAAC,CAAC,CAC3C,KAAM,CAAAI,MAAM,CAAG,GAAI,CAAAF,YAAY,CAACF,KAAK,CAAG,CAAC,CAAC,CAC1C,KAAM,CAAAK,OAAO,CAAGjD,cAAc,EAAIA,cAAc,CAACjB,MAAM,CAAG,CAAC,CAAGiB,cAAc,CAAGrB,aAAa,CAE5F,IAAK,GAAI,CAAAuE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGN,KAAK,CAAEM,CAAC,EAAE,CAAE,CAC9B,GAAI,CAAAvC,CAAC,CAAEC,CAAC,CAAEuC,CAAC,CAAEC,GAAG,CAChB,EAAG,CACDzC,CAAC,CAAG0C,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,CAAC,CAAG,CAAC,CACzB1C,CAAC,CAAGyC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,CAAC,CAAG,CAAC,CACzBH,CAAC,CAAGE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,CAAC,CAAG,CAAC,CACzBF,GAAG,CAAGzC,CAAC,CAAGA,CAAC,CAAGC,CAAC,CAAGA,CAAC,CAAGuC,CAAC,CAAGA,CAAC,CAC7B,CAAC,MAAQC,GAAG,CAAG,CAAC,EAAIA,GAAG,GAAK,CAAC,EAC7B,KAAM,CAAA9D,CAAC,CAAG+D,IAAI,CAACE,IAAI,CAACF,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAClCT,SAAS,CAACpB,GAAG,CAAC,CAACd,CAAC,CAAGrB,CAAC,CAAEsB,CAAC,CAAGtB,CAAC,CAAE6D,CAAC,CAAG7D,CAAC,CAAC,CAAE4D,CAAC,CAAG,CAAC,CAAC,CAC3CH,OAAO,CAACtB,GAAG,CAAC,CAAC4B,IAAI,CAACC,MAAM,CAAC,CAAC,CAAED,IAAI,CAACC,MAAM,CAAC,CAAC,CAAED,IAAI,CAACC,MAAM,CAAC,CAAC,CAAED,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAAEJ,CAAC,CAAG,CAAC,CAAC,CAChF,KAAM,CAAAM,GAAG,CAAG5E,QAAQ,CAACqE,OAAO,CAACI,IAAI,CAACI,KAAK,CAACJ,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGL,OAAO,CAAClE,MAAM,CAAC,CAAC,CAAC,CACzEiE,MAAM,CAACvB,GAAG,CAAC+B,GAAG,CAAEN,CAAC,CAAG,CAAC,CAAC,CACxB,CAEA,KAAM,CAAAQ,QAAQ,CAAG,GAAI,CAAApF,QAAQ,CAAC4C,EAAE,CAAE,CAChCM,QAAQ,CAAE,CAAEmC,IAAI,CAAE,CAAC,CAAEC,IAAI,CAAEf,SAAU,CAAC,CACtCS,MAAM,CAAE,CAAEK,IAAI,CAAE,CAAC,CAAEC,IAAI,CAAEb,OAAQ,CAAC,CAClCc,KAAK,CAAE,CAAEF,IAAI,CAAE,CAAC,CAAEC,IAAI,CAAEZ,MAAO,CACjC,CAAC,CAAC,CAEF,KAAM,CAAAc,OAAO,CAAG,GAAI,CAAAvF,OAAO,CAAC2C,EAAE,CAAE,CAC9BzB,MAAM,CACNC,QAAQ,CACRqE,QAAQ,CAAE,CACRC,KAAK,CAAE,CAAEC,KAAK,CAAE,CAAE,CAAC,CACnBC,OAAO,CAAE,CAAED,KAAK,CAAEnE,cAAe,CAAC,CAClCqE,SAAS,CAAE,CAAEF,KAAK,CAAE7D,gBAAiB,CAAC,CACtCgE,eAAe,CAAE,CAAEH,KAAK,CAAE5D,cAAe,CAAC,CAC1CgE,eAAe,CAAE,CAAEJ,KAAK,CAAE9D,cAAc,CAAG,CAAC,CAAG,CAAE,CACnD,CAAC,CACDmE,WAAW,CAAE,IAAI,CACjBC,SAAS,CAAE,KACb,CAAC,CAAC,CAEF,KAAM,CAAAC,SAAS,CAAG,GAAI,CAAAhG,IAAI,CAAC0C,EAAE,CAAE,CAAEuD,IAAI,CAAEvD,EAAE,CAACwD,MAAM,CAAEhB,QAAQ,CAAEI,OAAQ,CAAC,CAAC,CAEtE,GAAI,CAAAa,gBAAgB,CACpB,GAAI,CAAAC,QAAQ,CAAGC,WAAW,CAACC,GAAG,CAAC,CAAC,CAChC,GAAI,CAAAC,OAAO,CAAG,CAAC,CAEf,KAAM,CAAAC,MAAM,CAAIC,CAAC,EAAK,CACpBN,gBAAgB,CAAGO,qBAAqB,CAACF,MAAM,CAAC,CAChD,KAAM,CAAAG,KAAK,CAAGF,CAAC,CAAGL,QAAQ,CAC1BA,QAAQ,CAAGK,CAAC,CACZF,OAAO,EAAII,KAAK,CAAGpF,KAAK,CAExB+D,OAAO,CAACC,QAAQ,CAACC,KAAK,CAACC,KAAK,CAAGc,OAAO,CAAG,KAAK,CAE9C,GAAI9E,oBAAoB,CAAE,CACxBuE,SAAS,CAAChD,QAAQ,CAACb,CAAC,CAAG,CAACD,QAAQ,CAACI,OAAO,CAACH,CAAC,CAAGT,mBAAmB,CAChEsE,SAAS,CAAChD,QAAQ,CAACZ,CAAC,CAAG,CAACF,QAAQ,CAACI,OAAO,CAACF,CAAC,CAAGV,mBAAmB,CAClE,CAAC,IAAM,CACLsE,SAAS,CAAChD,QAAQ,CAACb,CAAC,CAAG,CAAC,CACxB6D,SAAS,CAAChD,QAAQ,CAACZ,CAAC,CAAG,CAAC,CAC1B,CAEA,GAAI,CAACL,eAAe,CAAE,CACpBiE,SAAS,CAACY,QAAQ,CAACzE,CAAC,CAAG0C,IAAI,CAACgC,GAAG,CAACN,OAAO,CAAG,MAAM,CAAC,CAAG,GAAG,CACvDP,SAAS,CAACY,QAAQ,CAACxE,CAAC,CAAGyC,IAAI,CAACiC,GAAG,CAACP,OAAO,CAAG,MAAM,CAAC,CAAG,IAAI,CACxDP,SAAS,CAACY,QAAQ,CAACjC,CAAC,EAAI,IAAI,CAAGpD,KAAK,CACtC,CAEAgB,QAAQ,CAACwE,MAAM,CAAC,CAAEC,KAAK,CAAEhB,SAAS,CAAElD,MAAO,CAAC,CAAC,CAC/C,CAAC,CAEDqD,gBAAgB,CAAGO,qBAAqB,CAACF,MAAM,CAAC,CAEhD,MAAO,IAAM,CACX9C,MAAM,CAACuD,mBAAmB,CAAC,QAAQ,CAAE/D,MAAM,CAAC,CAC5C,GAAIzB,oBAAoB,CAAE,CACxBY,SAAS,CAAC4E,mBAAmB,CAAC,WAAW,CAAErD,eAAe,CAAC,CAC7D,CACAsD,oBAAoB,CAACf,gBAAgB,CAAC,CACtC,GAAI9D,SAAS,CAAC8E,QAAQ,CAACzE,EAAE,CAACE,MAAM,CAAC,CAAE,CACjCP,SAAS,CAAC+E,WAAW,CAAC1E,EAAE,CAACE,MAAM,CAAC,CAClC,CACF,CAAC,CACH,CAAC,CAAE,CACDvB,aAAa,CACbC,cAAc,CACdC,KAAK,CACLE,oBAAoB,CACpBC,mBAAmB,CACnBC,cAAc,CACdC,gBAAgB,CAChBC,cAAc,CACdC,cAAc,CACdC,eAAe,CAChB,CAAC,CAEF,mBACE7B,IAAA,QACEmH,GAAG,CAAEpF,YAAa,CAClBD,SAAS,wBAAAsF,MAAA,CAAyBtF,SAAS,CAAG,CAC/C,CAAC,CAEN,CAAC,CAED,cAAe,CAAAb,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}