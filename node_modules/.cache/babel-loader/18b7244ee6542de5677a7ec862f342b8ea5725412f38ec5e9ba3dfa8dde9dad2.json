{"ast":null,"code":"// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\nexport class Program {\n  constructor(gl) {\n    let {\n      vertex,\n      fragment,\n      uniforms = {},\n      transparent = false,\n      cullFace = gl.BACK,\n      frontFace = gl.CCW,\n      depthTest = true,\n      depthWrite = true,\n      depthFunc = gl.LESS\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!gl.canvas) console.error('gl not passed as fist argument to Program');\n    this.gl = gl;\n    this.uniforms = uniforms;\n    this.id = ID++;\n    if (!vertex) console.warn('vertex shader not supplied');\n    if (!fragment) console.warn('fragment shader not supplied');\n\n    // Store program state\n    this.transparent = transparent;\n    this.cullFace = cullFace;\n    this.frontFace = frontFace;\n    this.depthTest = depthTest;\n    this.depthWrite = depthWrite;\n    this.depthFunc = depthFunc;\n    this.blendFunc = {};\n    this.blendEquation = {};\n\n    // set default blendFunc if transparent flagged\n    if (this.transparent && !this.blendFunc.src) {\n      if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n    }\n\n    // compile vertex shader and log errors\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, vertex);\n    gl.compileShader(vertexShader);\n    if (gl.getShaderInfoLog(vertexShader) !== '') {\n      console.warn(\"\".concat(gl.getShaderInfoLog(vertexShader), \"\\nVertex Shader\\n\").concat(addLineNumbers(vertex)));\n    }\n\n    // compile fragment shader and log errors\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, fragment);\n    gl.compileShader(fragmentShader);\n    if (gl.getShaderInfoLog(fragmentShader) !== '') {\n      console.warn(\"\".concat(gl.getShaderInfoLog(fragmentShader), \"\\nFragment Shader\\n\").concat(addLineNumbers(fragment)));\n    }\n\n    // compile program and log errors\n    this.program = gl.createProgram();\n    gl.attachShader(this.program, vertexShader);\n    gl.attachShader(this.program, fragmentShader);\n    gl.linkProgram(this.program);\n    if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n      return console.warn(gl.getProgramInfoLog(this.program));\n    }\n\n    // Remove shader once linked\n    gl.deleteShader(vertexShader);\n    gl.deleteShader(fragmentShader);\n\n    // Get active uniform locations\n    this.uniformLocations = new Map();\n    let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n    for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n      let uniform = gl.getActiveUniform(this.program, uIndex);\n      this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\n\n      // split uniforms' names to separate array and struct declarations\n      const split = uniform.name.match(/(\\w+)/g);\n      uniform.uniformName = split[0];\n      if (split.length === 3) {\n        uniform.isStructArray = true;\n        uniform.structIndex = Number(split[1]);\n        uniform.structProperty = split[2];\n      } else if (split.length === 2 && isNaN(Number(split[1]))) {\n        uniform.isStruct = true;\n        uniform.structProperty = split[1];\n      }\n    }\n\n    // Get active attribute locations\n    this.attributeLocations = new Map();\n    const locations = [];\n    const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n    for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n      const attribute = gl.getActiveAttrib(this.program, aIndex);\n      const location = gl.getAttribLocation(this.program, attribute.name);\n      locations[location] = attribute.name;\n      this.attributeLocations.set(attribute, location);\n    }\n    this.attributeOrder = locations.join('');\n  }\n  setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n    this.blendFunc.src = src;\n    this.blendFunc.dst = dst;\n    this.blendFunc.srcAlpha = srcAlpha;\n    this.blendFunc.dstAlpha = dstAlpha;\n    if (src) this.transparent = true;\n  }\n  setBlendEquation(modeRGB, modeAlpha) {\n    this.blendEquation.modeRGB = modeRGB;\n    this.blendEquation.modeAlpha = modeAlpha;\n  }\n  applyState() {\n    if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n    if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);else this.gl.renderer.disable(this.gl.CULL_FACE);\n    if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);else this.gl.renderer.disable(this.gl.BLEND);\n    if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n    this.gl.renderer.setFrontFace(this.frontFace);\n    this.gl.renderer.setDepthMask(this.depthWrite);\n    this.gl.renderer.setDepthFunc(this.depthFunc);\n    if (this.blendFunc.src) this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n    this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n  }\n  use() {\n    let {\n      flipFaces = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let textureUnit = -1;\n    const programActive = this.gl.renderer.currentProgram === this.id;\n\n    // Avoid gl call if program already in use\n    if (!programActive) {\n      this.gl.useProgram(this.program);\n      this.gl.renderer.currentProgram = this.id;\n    }\n\n    // Set only the active uniforms found in the shader\n    this.uniformLocations.forEach((location, activeUniform) => {\n      let name = activeUniform.uniformName;\n\n      // get supplied uniform\n      let uniform = this.uniforms[name];\n\n      // For structs, get the specific property instead of the entire object\n      if (activeUniform.isStruct) {\n        uniform = uniform[activeUniform.structProperty];\n        name += \".\".concat(activeUniform.structProperty);\n      }\n      if (activeUniform.isStructArray) {\n        uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\n        name += \"[\".concat(activeUniform.structIndex, \"].\").concat(activeUniform.structProperty);\n      }\n      if (!uniform) {\n        return warn(\"Active uniform \".concat(name, \" has not been supplied\"));\n      }\n      if (uniform && uniform.value === undefined) {\n        return warn(\"\".concat(name, \" uniform is missing a value parameter\"));\n      }\n      if (uniform.value.texture) {\n        textureUnit = textureUnit + 1;\n\n        // Check if texture needs to be updated\n        uniform.value.update(textureUnit);\n        return setUniform(this.gl, activeUniform.type, location, textureUnit);\n      }\n\n      // For texture arrays, set uniform as an array of texture units instead of just one\n      if (uniform.value.length && uniform.value[0].texture) {\n        const textureUnits = [];\n        uniform.value.forEach(value => {\n          textureUnit = textureUnit + 1;\n          value.update(textureUnit);\n          textureUnits.push(textureUnit);\n        });\n        return setUniform(this.gl, activeUniform.type, location, textureUnits);\n      }\n      setUniform(this.gl, activeUniform.type, location, uniform.value);\n    });\n    this.applyState();\n    if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n  }\n  remove() {\n    this.gl.deleteProgram(this.program);\n  }\n}\nfunction setUniform(gl, type, location, value) {\n  value = value.length ? flatten(value) : value;\n  const setValue = gl.renderer.state.uniformLocations.get(location);\n\n  // Avoid redundant uniform commands\n  if (value.length) {\n    if (setValue === undefined || setValue.length !== value.length) {\n      // clone array to store as cache\n      gl.renderer.state.uniformLocations.set(location, value.slice(0));\n    } else {\n      if (arraysEqual(setValue, value)) return;\n\n      // Update cached array values\n      setValue.set ? setValue.set(value) : setArray(setValue, value);\n      gl.renderer.state.uniformLocations.set(location, setValue);\n    }\n  } else {\n    if (setValue === value) return;\n    gl.renderer.state.uniformLocations.set(location, value);\n  }\n  switch (type) {\n    case 5126:\n      return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value);\n    // FLOAT\n    case 35664:\n      return gl.uniform2fv(location, value);\n    // FLOAT_VEC2\n    case 35665:\n      return gl.uniform3fv(location, value);\n    // FLOAT_VEC3\n    case 35666:\n      return gl.uniform4fv(location, value);\n    // FLOAT_VEC4\n    case 35670: // BOOL\n    case 5124: // INT\n    case 35678: // SAMPLER_2D\n    case 35680:\n      return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value);\n    // SAMPLER_CUBE\n    case 35671: // BOOL_VEC2\n    case 35667:\n      return gl.uniform2iv(location, value);\n    // INT_VEC2\n    case 35672: // BOOL_VEC3\n    case 35668:\n      return gl.uniform3iv(location, value);\n    // INT_VEC3\n    case 35673: // BOOL_VEC4\n    case 35669:\n      return gl.uniform4iv(location, value);\n    // INT_VEC4\n    case 35674:\n      return gl.uniformMatrix2fv(location, false, value);\n    // FLOAT_MAT2\n    case 35675:\n      return gl.uniformMatrix3fv(location, false, value);\n    // FLOAT_MAT3\n    case 35676:\n      return gl.uniformMatrix4fv(location, false, value);\n    // FLOAT_MAT4\n  }\n}\nfunction addLineNumbers(string) {\n  let lines = string.split('\\n');\n  for (let i = 0; i < lines.length; i++) {\n    lines[i] = i + 1 + ': ' + lines[i];\n  }\n  return lines.join('\\n');\n}\nfunction flatten(a) {\n  const arrayLen = a.length;\n  const valueLen = a[0].length;\n  if (valueLen === undefined) return a;\n  const length = arrayLen * valueLen;\n  let value = arrayCacheF32[length];\n  if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n  for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n  return value;\n}\nfunction arraysEqual(a, b) {\n  if (a.length !== b.length) return false;\n  for (let i = 0, l = a.length; i < l; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\nfunction setArray(a, b) {\n  for (let i = 0, l = a.length; i < l; i++) {\n    a[i] = b[i];\n  }\n}\nlet warnCount = 0;\nfunction warn(message) {\n  if (warnCount > 100) return;\n  console.warn(message);\n  warnCount++;\n  if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}","map":{"version":3,"names":["ID","arrayCacheF32","Program","constructor","gl","vertex","fragment","uniforms","transparent","cullFace","BACK","frontFace","CCW","depthTest","depthWrite","depthFunc","LESS","arguments","length","undefined","canvas","console","error","id","warn","blendFunc","blendEquation","src","renderer","premultipliedAlpha","setBlendFunc","ONE","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderInfoLog","concat","addLineNumbers","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteShader","uniformLocations","Map","numUniforms","ACTIVE_UNIFORMS","uIndex","uniform","getActiveUniform","set","getUniformLocation","name","split","match","uniformName","isStructArray","structIndex","Number","structProperty","isNaN","isStruct","attributeLocations","locations","numAttribs","ACTIVE_ATTRIBUTES","aIndex","attribute","getActiveAttrib","location","getAttribLocation","attributeOrder","join","dst","srcAlpha","dstAlpha","setBlendEquation","modeRGB","modeAlpha","applyState","enable","DEPTH_TEST","disable","CULL_FACE","BLEND","setCullFace","setFrontFace","setDepthMask","setDepthFunc","use","flipFaces","textureUnit","programActive","currentProgram","useProgram","forEach","activeUniform","value","texture","update","setUniform","type","textureUnits","push","CW","remove","deleteProgram","flatten","setValue","state","get","slice","arraysEqual","setArray","uniform1fv","uniform1f","uniform2fv","uniform3fv","uniform4fv","uniform1iv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","string","lines","i","a","arrayLen","valueLen","Float32Array","b","l","warnCount","message"],"sources":["/Users/krishnapandey/Desktop/Codevo/node_modules/ogl/src/core/Program.js"],"sourcesContent":["// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LESS,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as fist argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // compile vertex shader and log errors\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertex);\n        gl.compileShader(vertexShader);\n        if (gl.getShaderInfoLog(vertexShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n        }\n\n        // compile fragment shader and log errors\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragment);\n        gl.compileShader(fragmentShader);\n        if (gl.getShaderInfoLog(fragmentShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n        }\n\n        // compile program and log errors\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            return console.warn(gl.getProgramInfoLog(this.program));\n        }\n\n        // Remove shader once linked\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n\n            if (split.length === 3) {\n                uniform.isStructArray = true;\n                uniform.structIndex = Number(split[1]);\n                uniform.structProperty = split[2];\n            } else if (split.length === 2 && isNaN(Number(split[1]))) {\n                uniform.isStruct = true;\n                uniform.structProperty = split[1];\n            }\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = gl.getActiveAttrib(this.program, aIndex);\n            const location = gl.getAttribLocation(this.program, attribute.name);\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src)\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let name = activeUniform.uniformName;\n\n            // get supplied uniform\n            let uniform = this.uniforms[name];\n\n            // For structs, get the specific property instead of the entire object\n            if (activeUniform.isStruct) {\n                uniform = uniform[activeUniform.structProperty];\n                name += `.${activeUniform.structProperty}`;\n            }\n            if (activeUniform.isStructArray) {\n                uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\n                name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 35680:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,IAAIA,EAAE,GAAG,CAAC;;AAEV;AACA,MAAMC,aAAa,GAAG,CAAC,CAAC;AAExB,OAAO,MAAMC,OAAO,CAAC;EACjBC,WAAWA,CACPC,EAAE,EAaJ;IAAA,IAZE;MACIC,MAAM;MACNC,QAAQ;MACRC,QAAQ,GAAG,CAAC,CAAC;MAEbC,WAAW,GAAG,KAAK;MACnBC,QAAQ,GAAGL,EAAE,CAACM,IAAI;MAClBC,SAAS,GAAGP,EAAE,CAACQ,GAAG;MAClBC,SAAS,GAAG,IAAI;MAChBC,UAAU,GAAG,IAAI;MACjBC,SAAS,GAAGX,EAAE,CAACY;IACnB,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAEN,IAAI,CAACb,EAAE,CAACgB,MAAM,EAAEC,OAAO,CAACC,KAAK,CAAC,2CAA2C,CAAC;IAC1E,IAAI,CAAClB,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACG,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACgB,EAAE,GAAGvB,EAAE,EAAE;IAEd,IAAI,CAACK,MAAM,EAAEgB,OAAO,CAACG,IAAI,CAAC,4BAA4B,CAAC;IACvD,IAAI,CAAClB,QAAQ,EAAEe,OAAO,CAACG,IAAI,CAAC,8BAA8B,CAAC;;IAE3D;IACA,IAAI,CAAChB,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACE,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACU,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;;IAEvB;IACA,IAAI,IAAI,CAAClB,WAAW,IAAI,CAAC,IAAI,CAACiB,SAAS,CAACE,GAAG,EAAE;MACzC,IAAI,IAAI,CAACvB,EAAE,CAACwB,QAAQ,CAACC,kBAAkB,EAAE,IAAI,CAACC,YAAY,CAAC,IAAI,CAAC1B,EAAE,CAAC2B,GAAG,EAAE,IAAI,CAAC3B,EAAE,CAAC4B,mBAAmB,CAAC,CAAC,KAChG,IAAI,CAACF,YAAY,CAAC,IAAI,CAAC1B,EAAE,CAAC6B,SAAS,EAAE,IAAI,CAAC7B,EAAE,CAAC4B,mBAAmB,CAAC;IAC1E;;IAEA;IACA,MAAME,YAAY,GAAG9B,EAAE,CAAC+B,YAAY,CAAC/B,EAAE,CAACgC,aAAa,CAAC;IACtDhC,EAAE,CAACiC,YAAY,CAACH,YAAY,EAAE7B,MAAM,CAAC;IACrCD,EAAE,CAACkC,aAAa,CAACJ,YAAY,CAAC;IAC9B,IAAI9B,EAAE,CAACmC,gBAAgB,CAACL,YAAY,CAAC,KAAK,EAAE,EAAE;MAC1Cb,OAAO,CAACG,IAAI,IAAAgB,MAAA,CAAIpC,EAAE,CAACmC,gBAAgB,CAACL,YAAY,CAAC,uBAAAM,MAAA,CAAoBC,cAAc,CAACpC,MAAM,CAAC,CAAE,CAAC;IAClG;;IAEA;IACA,MAAMqC,cAAc,GAAGtC,EAAE,CAAC+B,YAAY,CAAC/B,EAAE,CAACuC,eAAe,CAAC;IAC1DvC,EAAE,CAACiC,YAAY,CAACK,cAAc,EAAEpC,QAAQ,CAAC;IACzCF,EAAE,CAACkC,aAAa,CAACI,cAAc,CAAC;IAChC,IAAItC,EAAE,CAACmC,gBAAgB,CAACG,cAAc,CAAC,KAAK,EAAE,EAAE;MAC5CrB,OAAO,CAACG,IAAI,IAAAgB,MAAA,CAAIpC,EAAE,CAACmC,gBAAgB,CAACG,cAAc,CAAC,yBAAAF,MAAA,CAAsBC,cAAc,CAACnC,QAAQ,CAAC,CAAE,CAAC;IACxG;;IAEA;IACA,IAAI,CAACsC,OAAO,GAAGxC,EAAE,CAACyC,aAAa,CAAC,CAAC;IACjCzC,EAAE,CAAC0C,YAAY,CAAC,IAAI,CAACF,OAAO,EAAEV,YAAY,CAAC;IAC3C9B,EAAE,CAAC0C,YAAY,CAAC,IAAI,CAACF,OAAO,EAAEF,cAAc,CAAC;IAC7CtC,EAAE,CAAC2C,WAAW,CAAC,IAAI,CAACH,OAAO,CAAC;IAC5B,IAAI,CAACxC,EAAE,CAAC4C,mBAAmB,CAAC,IAAI,CAACJ,OAAO,EAAExC,EAAE,CAAC6C,WAAW,CAAC,EAAE;MACvD,OAAO5B,OAAO,CAACG,IAAI,CAACpB,EAAE,CAAC8C,iBAAiB,CAAC,IAAI,CAACN,OAAO,CAAC,CAAC;IAC3D;;IAEA;IACAxC,EAAE,CAAC+C,YAAY,CAACjB,YAAY,CAAC;IAC7B9B,EAAE,CAAC+C,YAAY,CAACT,cAAc,CAAC;;IAE/B;IACA,IAAI,CAACU,gBAAgB,GAAG,IAAIC,GAAG,CAAC,CAAC;IACjC,IAAIC,WAAW,GAAGlD,EAAE,CAAC4C,mBAAmB,CAAC,IAAI,CAACJ,OAAO,EAAExC,EAAE,CAACmD,eAAe,CAAC;IAC1E,KAAK,IAAIC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGF,WAAW,EAAEE,MAAM,EAAE,EAAE;MACjD,IAAIC,OAAO,GAAGrD,EAAE,CAACsD,gBAAgB,CAAC,IAAI,CAACd,OAAO,EAAEY,MAAM,CAAC;MACvD,IAAI,CAACJ,gBAAgB,CAACO,GAAG,CAACF,OAAO,EAAErD,EAAE,CAACwD,kBAAkB,CAAC,IAAI,CAAChB,OAAO,EAAEa,OAAO,CAACI,IAAI,CAAC,CAAC;;MAErF;MACA,MAAMC,KAAK,GAAGL,OAAO,CAACI,IAAI,CAACE,KAAK,CAAC,QAAQ,CAAC;MAE1CN,OAAO,CAACO,WAAW,GAAGF,KAAK,CAAC,CAAC,CAAC;MAE9B,IAAIA,KAAK,CAAC5C,MAAM,KAAK,CAAC,EAAE;QACpBuC,OAAO,CAACQ,aAAa,GAAG,IAAI;QAC5BR,OAAO,CAACS,WAAW,GAAGC,MAAM,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC;QACtCL,OAAO,CAACW,cAAc,GAAGN,KAAK,CAAC,CAAC,CAAC;MACrC,CAAC,MAAM,IAAIA,KAAK,CAAC5C,MAAM,KAAK,CAAC,IAAImD,KAAK,CAACF,MAAM,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACtDL,OAAO,CAACa,QAAQ,GAAG,IAAI;QACvBb,OAAO,CAACW,cAAc,GAAGN,KAAK,CAAC,CAAC,CAAC;MACrC;IACJ;;IAEA;IACA,IAAI,CAACS,kBAAkB,GAAG,IAAIlB,GAAG,CAAC,CAAC;IACnC,MAAMmB,SAAS,GAAG,EAAE;IACpB,MAAMC,UAAU,GAAGrE,EAAE,CAAC4C,mBAAmB,CAAC,IAAI,CAACJ,OAAO,EAAExC,EAAE,CAACsE,iBAAiB,CAAC;IAC7E,KAAK,IAAIC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGF,UAAU,EAAEE,MAAM,EAAE,EAAE;MAChD,MAAMC,SAAS,GAAGxE,EAAE,CAACyE,eAAe,CAAC,IAAI,CAACjC,OAAO,EAAE+B,MAAM,CAAC;MAC1D,MAAMG,QAAQ,GAAG1E,EAAE,CAAC2E,iBAAiB,CAAC,IAAI,CAACnC,OAAO,EAAEgC,SAAS,CAACf,IAAI,CAAC;MACnEW,SAAS,CAACM,QAAQ,CAAC,GAAGF,SAAS,CAACf,IAAI;MACpC,IAAI,CAACU,kBAAkB,CAACZ,GAAG,CAACiB,SAAS,EAAEE,QAAQ,CAAC;IACpD;IACA,IAAI,CAACE,cAAc,GAAGR,SAAS,CAACS,IAAI,CAAC,EAAE,CAAC;EAC5C;EAEAnD,YAAYA,CAACH,GAAG,EAAEuD,GAAG,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;IACvC,IAAI,CAAC3D,SAAS,CAACE,GAAG,GAAGA,GAAG;IACxB,IAAI,CAACF,SAAS,CAACyD,GAAG,GAAGA,GAAG;IACxB,IAAI,CAACzD,SAAS,CAAC0D,QAAQ,GAAGA,QAAQ;IAClC,IAAI,CAAC1D,SAAS,CAAC2D,QAAQ,GAAGA,QAAQ;IAClC,IAAIzD,GAAG,EAAE,IAAI,CAACnB,WAAW,GAAG,IAAI;EACpC;EAEA6E,gBAAgBA,CAACC,OAAO,EAAEC,SAAS,EAAE;IACjC,IAAI,CAAC7D,aAAa,CAAC4D,OAAO,GAAGA,OAAO;IACpC,IAAI,CAAC5D,aAAa,CAAC6D,SAAS,GAAGA,SAAS;EAC5C;EAEAC,UAAUA,CAAA,EAAG;IACT,IAAI,IAAI,CAAC3E,SAAS,EAAE,IAAI,CAACT,EAAE,CAACwB,QAAQ,CAAC6D,MAAM,CAAC,IAAI,CAACrF,EAAE,CAACsF,UAAU,CAAC,CAAC,KAC3D,IAAI,CAACtF,EAAE,CAACwB,QAAQ,CAAC+D,OAAO,CAAC,IAAI,CAACvF,EAAE,CAACsF,UAAU,CAAC;IAEjD,IAAI,IAAI,CAACjF,QAAQ,EAAE,IAAI,CAACL,EAAE,CAACwB,QAAQ,CAAC6D,MAAM,CAAC,IAAI,CAACrF,EAAE,CAACwF,SAAS,CAAC,CAAC,KACzD,IAAI,CAACxF,EAAE,CAACwB,QAAQ,CAAC+D,OAAO,CAAC,IAAI,CAACvF,EAAE,CAACwF,SAAS,CAAC;IAEhD,IAAI,IAAI,CAACnE,SAAS,CAACE,GAAG,EAAE,IAAI,CAACvB,EAAE,CAACwB,QAAQ,CAAC6D,MAAM,CAAC,IAAI,CAACrF,EAAE,CAACyF,KAAK,CAAC,CAAC,KAC1D,IAAI,CAACzF,EAAE,CAACwB,QAAQ,CAAC+D,OAAO,CAAC,IAAI,CAACvF,EAAE,CAACyF,KAAK,CAAC;IAE5C,IAAI,IAAI,CAACpF,QAAQ,EAAE,IAAI,CAACL,EAAE,CAACwB,QAAQ,CAACkE,WAAW,CAAC,IAAI,CAACrF,QAAQ,CAAC;IAC9D,IAAI,CAACL,EAAE,CAACwB,QAAQ,CAACmE,YAAY,CAAC,IAAI,CAACpF,SAAS,CAAC;IAC7C,IAAI,CAACP,EAAE,CAACwB,QAAQ,CAACoE,YAAY,CAAC,IAAI,CAAClF,UAAU,CAAC;IAC9C,IAAI,CAACV,EAAE,CAACwB,QAAQ,CAACqE,YAAY,CAAC,IAAI,CAAClF,SAAS,CAAC;IAC7C,IAAI,IAAI,CAACU,SAAS,CAACE,GAAG,EAClB,IAAI,CAACvB,EAAE,CAACwB,QAAQ,CAACE,YAAY,CAAC,IAAI,CAACL,SAAS,CAACE,GAAG,EAAE,IAAI,CAACF,SAAS,CAACyD,GAAG,EAAE,IAAI,CAACzD,SAAS,CAAC0D,QAAQ,EAAE,IAAI,CAAC1D,SAAS,CAAC2D,QAAQ,CAAC;IAC3H,IAAI,CAAChF,EAAE,CAACwB,QAAQ,CAACyD,gBAAgB,CAAC,IAAI,CAAC3D,aAAa,CAAC4D,OAAO,EAAE,IAAI,CAAC5D,aAAa,CAAC6D,SAAS,CAAC;EAC/F;EAEAW,GAAGA,CAAA,EAA6B;IAAA,IAA5B;MAAEC,SAAS,GAAG;IAAM,CAAC,GAAAlF,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAC1B,IAAImF,WAAW,GAAG,CAAC,CAAC;IACpB,MAAMC,aAAa,GAAG,IAAI,CAACjG,EAAE,CAACwB,QAAQ,CAAC0E,cAAc,KAAK,IAAI,CAAC/E,EAAE;;IAEjE;IACA,IAAI,CAAC8E,aAAa,EAAE;MAChB,IAAI,CAACjG,EAAE,CAACmG,UAAU,CAAC,IAAI,CAAC3D,OAAO,CAAC;MAChC,IAAI,CAACxC,EAAE,CAACwB,QAAQ,CAAC0E,cAAc,GAAG,IAAI,CAAC/E,EAAE;IAC7C;;IAEA;IACA,IAAI,CAAC6B,gBAAgB,CAACoD,OAAO,CAAC,CAAC1B,QAAQ,EAAE2B,aAAa,KAAK;MACvD,IAAI5C,IAAI,GAAG4C,aAAa,CAACzC,WAAW;;MAEpC;MACA,IAAIP,OAAO,GAAG,IAAI,CAAClD,QAAQ,CAACsD,IAAI,CAAC;;MAEjC;MACA,IAAI4C,aAAa,CAACnC,QAAQ,EAAE;QACxBb,OAAO,GAAGA,OAAO,CAACgD,aAAa,CAACrC,cAAc,CAAC;QAC/CP,IAAI,QAAArB,MAAA,CAAQiE,aAAa,CAACrC,cAAc,CAAE;MAC9C;MACA,IAAIqC,aAAa,CAACxC,aAAa,EAAE;QAC7BR,OAAO,GAAGA,OAAO,CAACgD,aAAa,CAACvC,WAAW,CAAC,CAACuC,aAAa,CAACrC,cAAc,CAAC;QAC1EP,IAAI,QAAArB,MAAA,CAAQiE,aAAa,CAACvC,WAAW,QAAA1B,MAAA,CAAKiE,aAAa,CAACrC,cAAc,CAAE;MAC5E;MAEA,IAAI,CAACX,OAAO,EAAE;QACV,OAAOjC,IAAI,mBAAAgB,MAAA,CAAmBqB,IAAI,2BAAwB,CAAC;MAC/D;MAEA,IAAIJ,OAAO,IAAIA,OAAO,CAACiD,KAAK,KAAKvF,SAAS,EAAE;QACxC,OAAOK,IAAI,IAAAgB,MAAA,CAAIqB,IAAI,0CAAuC,CAAC;MAC/D;MAEA,IAAIJ,OAAO,CAACiD,KAAK,CAACC,OAAO,EAAE;QACvBP,WAAW,GAAGA,WAAW,GAAG,CAAC;;QAE7B;QACA3C,OAAO,CAACiD,KAAK,CAACE,MAAM,CAACR,WAAW,CAAC;QACjC,OAAOS,UAAU,CAAC,IAAI,CAACzG,EAAE,EAAEqG,aAAa,CAACK,IAAI,EAAEhC,QAAQ,EAAEsB,WAAW,CAAC;MACzE;;MAEA;MACA,IAAI3C,OAAO,CAACiD,KAAK,CAACxF,MAAM,IAAIuC,OAAO,CAACiD,KAAK,CAAC,CAAC,CAAC,CAACC,OAAO,EAAE;QAClD,MAAMI,YAAY,GAAG,EAAE;QACvBtD,OAAO,CAACiD,KAAK,CAACF,OAAO,CAAEE,KAAK,IAAK;UAC7BN,WAAW,GAAGA,WAAW,GAAG,CAAC;UAC7BM,KAAK,CAACE,MAAM,CAACR,WAAW,CAAC;UACzBW,YAAY,CAACC,IAAI,CAACZ,WAAW,CAAC;QAClC,CAAC,CAAC;QAEF,OAAOS,UAAU,CAAC,IAAI,CAACzG,EAAE,EAAEqG,aAAa,CAACK,IAAI,EAAEhC,QAAQ,EAAEiC,YAAY,CAAC;MAC1E;MAEAF,UAAU,CAAC,IAAI,CAACzG,EAAE,EAAEqG,aAAa,CAACK,IAAI,EAAEhC,QAAQ,EAAErB,OAAO,CAACiD,KAAK,CAAC;IACpE,CAAC,CAAC;IAEF,IAAI,CAAClB,UAAU,CAAC,CAAC;IACjB,IAAIW,SAAS,EAAE,IAAI,CAAC/F,EAAE,CAACwB,QAAQ,CAACmE,YAAY,CAAC,IAAI,CAACpF,SAAS,KAAK,IAAI,CAACP,EAAE,CAACQ,GAAG,GAAG,IAAI,CAACR,EAAE,CAAC6G,EAAE,GAAG,IAAI,CAAC7G,EAAE,CAACQ,GAAG,CAAC;EAC3G;EAEAsG,MAAMA,CAAA,EAAG;IACL,IAAI,CAAC9G,EAAE,CAAC+G,aAAa,CAAC,IAAI,CAACvE,OAAO,CAAC;EACvC;AACJ;AAEA,SAASiE,UAAUA,CAACzG,EAAE,EAAE0G,IAAI,EAAEhC,QAAQ,EAAE4B,KAAK,EAAE;EAC3CA,KAAK,GAAGA,KAAK,CAACxF,MAAM,GAAGkG,OAAO,CAACV,KAAK,CAAC,GAAGA,KAAK;EAC7C,MAAMW,QAAQ,GAAGjH,EAAE,CAACwB,QAAQ,CAAC0F,KAAK,CAAClE,gBAAgB,CAACmE,GAAG,CAACzC,QAAQ,CAAC;;EAEjE;EACA,IAAI4B,KAAK,CAACxF,MAAM,EAAE;IACd,IAAImG,QAAQ,KAAKlG,SAAS,IAAIkG,QAAQ,CAACnG,MAAM,KAAKwF,KAAK,CAACxF,MAAM,EAAE;MAC5D;MACAd,EAAE,CAACwB,QAAQ,CAAC0F,KAAK,CAAClE,gBAAgB,CAACO,GAAG,CAACmB,QAAQ,EAAE4B,KAAK,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC,MAAM;MACH,IAAIC,WAAW,CAACJ,QAAQ,EAAEX,KAAK,CAAC,EAAE;;MAElC;MACAW,QAAQ,CAAC1D,GAAG,GAAG0D,QAAQ,CAAC1D,GAAG,CAAC+C,KAAK,CAAC,GAAGgB,QAAQ,CAACL,QAAQ,EAAEX,KAAK,CAAC;MAC9DtG,EAAE,CAACwB,QAAQ,CAAC0F,KAAK,CAAClE,gBAAgB,CAACO,GAAG,CAACmB,QAAQ,EAAEuC,QAAQ,CAAC;IAC9D;EACJ,CAAC,MAAM;IACH,IAAIA,QAAQ,KAAKX,KAAK,EAAE;IACxBtG,EAAE,CAACwB,QAAQ,CAAC0F,KAAK,CAAClE,gBAAgB,CAACO,GAAG,CAACmB,QAAQ,EAAE4B,KAAK,CAAC;EAC3D;EAEA,QAAQI,IAAI;IACR,KAAK,IAAI;MACL,OAAOJ,KAAK,CAACxF,MAAM,GAAGd,EAAE,CAACuH,UAAU,CAAC7C,QAAQ,EAAE4B,KAAK,CAAC,GAAGtG,EAAE,CAACwH,SAAS,CAAC9C,QAAQ,EAAE4B,KAAK,CAAC;IAAE;IAC1F,KAAK,KAAK;MACN,OAAOtG,EAAE,CAACyH,UAAU,CAAC/C,QAAQ,EAAE4B,KAAK,CAAC;IAAE;IAC3C,KAAK,KAAK;MACN,OAAOtG,EAAE,CAAC0H,UAAU,CAAChD,QAAQ,EAAE4B,KAAK,CAAC;IAAE;IAC3C,KAAK,KAAK;MACN,OAAOtG,EAAE,CAAC2H,UAAU,CAACjD,QAAQ,EAAE4B,KAAK,CAAC;IAAE;IAC3C,KAAK,KAAK,CAAC,CAAC;IACZ,KAAK,IAAI,CAAC,CAAC;IACX,KAAK,KAAK,CAAC,CAAC;IACZ,KAAK,KAAK;MACN,OAAOA,KAAK,CAACxF,MAAM,GAAGd,EAAE,CAAC4H,UAAU,CAAClD,QAAQ,EAAE4B,KAAK,CAAC,GAAGtG,EAAE,CAAC6H,SAAS,CAACnD,QAAQ,EAAE4B,KAAK,CAAC;IAAE;IAC1F,KAAK,KAAK,CAAC,CAAC;IACZ,KAAK,KAAK;MACN,OAAOtG,EAAE,CAAC8H,UAAU,CAACpD,QAAQ,EAAE4B,KAAK,CAAC;IAAE;IAC3C,KAAK,KAAK,CAAC,CAAC;IACZ,KAAK,KAAK;MACN,OAAOtG,EAAE,CAAC+H,UAAU,CAACrD,QAAQ,EAAE4B,KAAK,CAAC;IAAE;IAC3C,KAAK,KAAK,CAAC,CAAC;IACZ,KAAK,KAAK;MACN,OAAOtG,EAAE,CAACgI,UAAU,CAACtD,QAAQ,EAAE4B,KAAK,CAAC;IAAE;IAC3C,KAAK,KAAK;MACN,OAAOtG,EAAE,CAACiI,gBAAgB,CAACvD,QAAQ,EAAE,KAAK,EAAE4B,KAAK,CAAC;IAAE;IACxD,KAAK,KAAK;MACN,OAAOtG,EAAE,CAACkI,gBAAgB,CAACxD,QAAQ,EAAE,KAAK,EAAE4B,KAAK,CAAC;IAAE;IACxD,KAAK,KAAK;MACN,OAAOtG,EAAE,CAACmI,gBAAgB,CAACzD,QAAQ,EAAE,KAAK,EAAE4B,KAAK,CAAC;IAAE;EAC5D;AACJ;AAEA,SAASjE,cAAcA,CAAC+F,MAAM,EAAE;EAC5B,IAAIC,KAAK,GAAGD,MAAM,CAAC1E,KAAK,CAAC,IAAI,CAAC;EAC9B,KAAK,IAAI4E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACvH,MAAM,EAAEwH,CAAC,EAAE,EAAE;IACnCD,KAAK,CAACC,CAAC,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAG,IAAI,GAAGD,KAAK,CAACC,CAAC,CAAC;EACtC;EACA,OAAOD,KAAK,CAACxD,IAAI,CAAC,IAAI,CAAC;AAC3B;AAEA,SAASmC,OAAOA,CAACuB,CAAC,EAAE;EAChB,MAAMC,QAAQ,GAAGD,CAAC,CAACzH,MAAM;EACzB,MAAM2H,QAAQ,GAAGF,CAAC,CAAC,CAAC,CAAC,CAACzH,MAAM;EAC5B,IAAI2H,QAAQ,KAAK1H,SAAS,EAAE,OAAOwH,CAAC;EACpC,MAAMzH,MAAM,GAAG0H,QAAQ,GAAGC,QAAQ;EAClC,IAAInC,KAAK,GAAGzG,aAAa,CAACiB,MAAM,CAAC;EACjC,IAAI,CAACwF,KAAK,EAAEzG,aAAa,CAACiB,MAAM,CAAC,GAAGwF,KAAK,GAAG,IAAIoC,YAAY,CAAC5H,MAAM,CAAC;EACpE,KAAK,IAAIwH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,QAAQ,EAAEF,CAAC,EAAE,EAAEhC,KAAK,CAAC/C,GAAG,CAACgF,CAAC,CAACD,CAAC,CAAC,EAAEA,CAAC,GAAGG,QAAQ,CAAC;EAChE,OAAOnC,KAAK;AAChB;AAEA,SAASe,WAAWA,CAACkB,CAAC,EAAEI,CAAC,EAAE;EACvB,IAAIJ,CAAC,CAACzH,MAAM,KAAK6H,CAAC,CAAC7H,MAAM,EAAE,OAAO,KAAK;EACvC,KAAK,IAAIwH,CAAC,GAAG,CAAC,EAAEM,CAAC,GAAGL,CAAC,CAACzH,MAAM,EAAEwH,CAAC,GAAGM,CAAC,EAAEN,CAAC,EAAE,EAAE;IACtC,IAAIC,CAAC,CAACD,CAAC,CAAC,KAAKK,CAAC,CAACL,CAAC,CAAC,EAAE,OAAO,KAAK;EACnC;EACA,OAAO,IAAI;AACf;AAEA,SAAShB,QAAQA,CAACiB,CAAC,EAAEI,CAAC,EAAE;EACpB,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEM,CAAC,GAAGL,CAAC,CAACzH,MAAM,EAAEwH,CAAC,GAAGM,CAAC,EAAEN,CAAC,EAAE,EAAE;IACtCC,CAAC,CAACD,CAAC,CAAC,GAAGK,CAAC,CAACL,CAAC,CAAC;EACf;AACJ;AAEA,IAAIO,SAAS,GAAG,CAAC;AACjB,SAASzH,IAAIA,CAAC0H,OAAO,EAAE;EACnB,IAAID,SAAS,GAAG,GAAG,EAAE;EACrB5H,OAAO,CAACG,IAAI,CAAC0H,OAAO,CAAC;EACrBD,SAAS,EAAE;EACX,IAAIA,SAAS,GAAG,GAAG,EAAE5H,OAAO,CAACG,IAAI,CAAC,iDAAiD,CAAC;AACxF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}